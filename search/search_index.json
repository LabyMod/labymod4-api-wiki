{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LabyMod 4 Developer Portal","text":"<p>Welcome to the Developer Portal of LabyMod 4.  This website serves as a hub for everything related to the LabyMod 4, directed at developers. Whether you're looking for information on how to create addons or utilize our server API, you'll find it here.</p> <p>Have you found something missing from this wiki that you think is important, or are you unhappy with something? Please fork our wiki repository, add/improve it and create a pull request here.</p> <p>If you have any questions or need help, feel free to join our Discord server for Developers.</p>"},{"location":"contributors/","title":"Contributors","text":"<p>Due to the sheer complexity and scope of LabyMod 4 and its Addon &amp; Server API, we cannot maintain this wiki alone.  Therefore, we rely on the help of the community to keep this wiki complete and up to date.</p> <p>If you want to help us, feel free to fork the repository of this wiki, make your desired changes and create a pull request here.</p>"},{"location":"contributors/#contributors-from-the-community","title":"Contributors from the community","text":"Important Note <p>To avoid biases, all contributors are sorted by the date of their first merged pull request.</p> <p>We want to express our gratitude to the following people for their contributions to this wiki:</p> <ul> <li>FllipEis</li> <li>Wector11211</li> <li>Adler702</li> <li>Wqsknijper</li> <li>RappyTV</li> <li>NULLYUKI</li> <li>Misode</li> <li>RedstoneSpeaker</li> <li>xNoci</li> <li>cs-jako</li> <li>Funboyy</li> <li>MisterCore</li> <li>EinsJustinn</li> <li>Kaseax</li> <li>Nathan Weisz</li> <li>Corvonn</li> <li>Strafbefehl</li> </ul>"},{"location":"pages/addon/","title":"Addon API Introduction","text":"<p>With LabyMod 4 we've improved the way to develop addons.  You now have one project per addon; this allows you to write version-independent code in the same project as version-dependent code without needing to copy &amp; paste the version-independent code for every version.</p> <p>Here are some of the changes with our new Addon API:</p> <ul> <li>With our brand new Activity System, you can easily create and theme custom screens without needing to know how to use OpenGL</li> <li>More events for almost every occasion that behave like server-side events</li> <li>Improved way to create and use configurations</li> <li>Easy internationalization</li> <li>Mixin for bytecode manipulation in every version</li> <li>Easier setup and debugging of the addon</li> </ul> <p> As of now, you'll have to manually update your <code>build.gradle.kts</code> when we update our Gradle plugin or support a new Minecraft version.  If you want to stay up to date at any time or if you have any questions regarding our Addon API, please feel free to  join our development Discord.</p> <p>Have you found something missing from this wiki that you think is important, or are you unhappy with something?  Please fork our wiki repository, add/improve it and create a pull request  here.</p>"},{"location":"pages/addon/additional-infos/","title":"Additional Information","text":"<p>Here you can find some information about things that didn't fit anywhere else.</p>"},{"location":"pages/addon/additional-infos/#why-is-the-naming-on-some-of-our-methods-so-weird","title":"Why Is the Naming on Some of Our Methods So Weird?","text":"<p>We've decided to change how we name our getters &amp; setters.  The \"established\" naming for getters would be <code>getSomething()</code>, but we've decided as an \"internal naming convention\" that getters that can't return <code>null</code> and return a type created by us don't have the <code>get</code> prefix but instead are just called by their name.  So instead of for example <code>getMinecraft()</code> you'll only find <code>minecraft()</code>.  Setters would normally have the prefix <code>set</code>.  But if the setter is returning the same type of the class it is in; the <code>set</code> prefix will also be removed (this is most common in builders, so for example, in our renderers. instead of <code>setPos(x, y)</code>, you'll only find <code>pos(x, y)</code>).</p>"},{"location":"pages/addon/troubleshoot/","title":"Troubleshoot","text":"<p>Common mistakes and errors with possible solutions are explained on this page.</p> <p>If you have an issue that is described here, please read carefully.  If the approach to resolving your issue doesn't work feel free to ask for help on our development Discord.</p> <p>If you need help from others, please always keep in mind that they're human and don't always answer right away and think about what is written on NoHello.net.</p>"},{"location":"pages/addon/troubleshoot/#my-lss-stylesheet-doesnt-load","title":"My LSS StyleSheet Doesn't load","text":"<p>If it can happen that the LSS StyleSheet doesn't load, this is most commonly caused by a forgotten or misplaced semicolon (<code>;</code>) or curly bracket (<code>{</code>, <code>}</code>); the affected line should be printed to your log. Try to search for those two cases. If you cannot find anything, feel free to ask for help on our development Discord and provide your LSS StyleSheet.</p>"},{"location":"pages/addon/troubleshoot/#unable-to-start-development-runs-in-intellij-idea","title":"Unable to start Development runs in IntelliJ IDEA","text":"<p>If your development runs fail to start in IntelliJ IDEA, it may be due to a common bug. Follow these steps to resolve the issue:</p> <ol> <li>Close IntelliJ IDEA: Ensure that the IDE is completely closed.</li> <li>Delete the <code>.idea</code> Folder: Navigate to your project directory and remove the <code>.idea</code> folder. This folder contains project-specific settings.</li> <li>Restart IntelliJ IDEA: After deleting the <code>.idea</code> folder, reopen IntelliJ IDEA.</li> </ol> <p>Following these steps should resolve the issue and allow your development runs to start successfully again.</p>"},{"location":"pages/addon/activities/activity/","title":"What are Activities?","text":"<p>Activities are an easy way to create custom screens, and the best part: you don't need to know OpenGL to create most activities.  Only if you want to display something truly custom, knowing OpenGL could be beneficial. However, it still wouldn't be much of a problem if you don't because you have many other possibilities to render anything you want.</p> <p>In the following pages, we will explain how to create custom activities, create and use widgets in your Activities, and theme them with LSS. It can be a bit much to take in at first, but it's worth it.</p> <p>Examples are shown on every page; you will find a link to the section with the example on every page within the first paragraphs. Click here to see the first example.</p> Important Note <p>Remember that we're explaining the Activity System in multiple steps. On this page, we will explain how to create bare Activities without any widgets or LSS. This is for example purposes only; we highly recommend using Widgets and LSS in your Activities, as the system is not optimized for bare Activities. If you create custom screens, in order to be accepted in our addon store, your screens need to be created with this system, and they need to support theming. </p>"},{"location":"pages/addon/activities/activity/#creating-a-bare-activity","title":"Creating a Bare Activity","text":"<p>All you need to do to create an Activity is create a new class and inherit either <code>SimpleActivity</code> or <code>Activity</code>. The SimpleActivity and Activity only have one difference. By inheriting <code>SimpleActivity</code>, your Activity renders the default theme background; by inheriting just <code>Activity</code>, you'll have an empty Activity that you can 100% customize. For our example, we'll be inheriting the <code>SimpleActivity</code> as we register it as a NavigationElement (so it will be displayed as another tab in the navigation). </p> <p>Now we need to add the <code>AutoActivity</code> annotation at the top of our class, and the Activity will open. In this case, we want to render a text at the center of the screen, and as we are creating a bare Activity, we'll overwrite the <code>render</code> method. (please keep in mind that the super call has to be at the head of the method. Otherwise, our text will be rendered beneath the background). </p> <p>All we have to do now is to get the bounds of the Activity by declaring <code>this.bounds()</code> as a local variable (the bounds represent the position and size of activities and widgets - more on that in the part about LSS). Then we need get the <code>TextRenderer</code> by calling <code>this.labyAPI.renderPipeline().textRenderer()</code> as we will render our text with that renderer. </p> <p>Now to the rendering, apply your text to the renderer by using the setter <code>text</code>; our text is the String <code>\"I am a bare rendered example text\"</code>, so we use <code>textRenderer.text(\"I am a bare rendered example text\")</code>; after that, we set our position with the bounds we got before. As we want the text centered we need the <code>centerX</code> and <code>centerY</code> float and set them via <code>textRenderer.pos(bounds.getCenterX(), bounds.getCenterY())</code>. </p> <p>We could theoretically render it now, but we want to adjust the renderer a bit. As of now, the text would start at the centered x position, but we want it centered, so we add <code>textRenderer.centered(true)</code>. Now, as this text will be rendered in a menu, we don't want a shadow; all we need to do to remove the shadow is add <code>textRenderer.shadow(false)</code>, maybe add a bit of color with <code>textRenderer.color(Color.ORANGE.getRGB())</code>.</p> <p>Now, as all is set as we want, we can call <code>textRenderer.render(stack)</code>, and we are finished. </p>"},{"location":"pages/addon/activities/activity/#bare-activity-result","title":"Bare Activity Result","text":"<p>Looking back at what we just wrote, this is what the code and result would look like:</p>  ExampleBareActivity Result <pre><code>@AutoActivity\npublic class ExampleBareActivity extends SimpleActivity {\n\n  @Override\n  public void render(Stack stack, MutableMouse mouse, float partialTicks) {\n    super.render(stack, mouse, partialTicks);\n\n    Bounds bounds = this.bounds();\n    TextRenderer textRenderer = this.labyAPI.renderPipeline().textRenderer();\n    textRenderer.text(\"I am a bare rendered example text\")\n        .pos(bounds.getCenterX(), bounds.getCenterY())\n        .centered(true)\n        .shadow(false)\n        .color(Color.ORANGE.getRGB())\n        .render(stack);\n  }\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/custom-widgets/","title":"Create Your Own Widget","text":"<p>You cannot only use the Widgets we created, but you can also create your own ones. This small example will show you how to create your first Widget and add it to your Activity. The result of our little example will be a widget that displays a player's head to the left and a player's name. This Widget will be applied in a vertical list with multiple entries.</p>"},{"location":"pages/addon/activities/custom-widgets/#basics","title":"Basics","text":"<p>First of all, every Widget is a subclass of <code>AbstractWidget</code>, you can also extend other widgets like for example the <code>ButtonWidget</code> or the <code>VerticalListWidget</code> to get some basic functionality. The <code>AutoWidget</code> annotation is necessary on every Widget.</p>"},{"location":"pages/addon/activities/custom-widgets/#generics","title":"Generics","text":"<p>The generic type of the AbstractWidget (<code>AbstractWidget&lt;...&gt;</code>) defines the type of the children of this widget. If you want your widget to have children of only a specific type, you can define it here, otherwise just use <code>Widget</code>. In reality this is used for stuff like this: <pre><code>public class DropdownListWidget&lt;T&gt; extends VerticalListWidget&lt;DropdownEntryWidget&lt;T&gt;&gt; {}\n</code></pre></p>"},{"location":"pages/addon/activities/custom-widgets/#user-interaction-custom-rendering","title":"User interaction / Custom rendering","text":"ExampleWidget <pre><code>@AutoWidget\npublic class ExampleWidget extends AbstractWidget&lt;Widget&gt; {\n\n    @Override\n    public void renderWidget(ScreenContext context) {\n        if (this.isVisible()) {\n            // optional: custom rendering\n        }\n\n        super.renderWidget(context); // Render children\n    }\n\n    @Override\n    public boolean mouseClicked(MutableMouse mouse, MouseButton mouseButton) {\n        // optional: handle mouse interactions\n        return super.mouseClicked(mouse, mouseButton);\n    }\n\n    @Override\n    public boolean keyPressed(Key key, InputType type) {\n        // optional: handle key press\n        return super.keyPressed(key, type);\n    }\n\n    /*\n        There are more methods that you can override for user input like:\n        - mouseDragged(...)\n        - mouseScrolled(...)\n        - mouseReleased(...)\n        - keyReleased(...)\n        - fileDropped(...) -&gt; there may be limitations in older Minecraft versions, for file interactions you should always provide an optional file chooser (e.g. FileChooserWidget)\n    */\n}\n</code></pre>"},{"location":"pages/addon/activities/custom-widgets/#children-custom-style","title":"Children / Custom style","text":"<p>Just like Activities, Widgets can also have children and styles. In your custom widget, you can add children in the initialize() method just like you can do it in the Activity.</p>  UserListActivity user-list-activity.lss UserWidget user-widget.lss Result <pre><code>@AutoActivity\n@Link(\"user-list-activity.lss\")\npublic class UserListActivity extends SimpleActivity {\n\n    @Override\n    public void initialize(Parent parent) {\n        super.initialize(parent);\n\n        VerticalListWidget&lt;UserWidget&gt; users = new VerticalListWidget&lt;&gt;();\n        users.addId(\"users\");\n        this.document().addChild(users);\n\n        users.addChild(new UserWidget(\"LabyMod\"));\n        users.addChild(new UserWidget(\"LabyStudio\"));\n        users.addChild(new UserWidget(\"LabyMarco\"));\n\n        ButtonWidget addButton = ButtonWidget.text(\"Add User\");\n        addButton.setPressable(() -&gt; {\n            // addChildInitialized can be used to add children to a widget \n            // after the initialize() method has already been called\n            users.addChildInitialized(new UserWidget(\"Test\"));\n\n            // Keep in mind that the VerticalListWidget users will get recreated when the Activity is being initialized again.\n            // This means that for example when resizing the window all \"Test\" users will be removed again, you can\n            // prevent this by saving the usernames in a separate list and adding to this list\n        });\n        addButton.addId(\"add-button\");\n        this.document().addChild(addButton);\n    }\n}\n</code></pre> <pre><code>.users {\n    left: 50%;\n    alignment-x: center;\n    top: 30;\n\n    width: fit-content;\n    height: fit-content;\n\n    User {\n        height: fit-content;\n    }\n}\n\n.add-button {\n    left: 50%;\n    alignment-x: center;\n    top: 10;\n\n    width: 50;\n    height: 20;\n}\n</code></pre> <pre><code>@AutoWidget\n@Link(\"user-widget.lss\")\npublic class UserWidget extends AbstractWidget&lt;Widget&gt; {\n\n    private final String username;\n\n    public UserWidget(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public void initialize(Parent parent) {\n        super.initialize(parent);\n\n        IconWidget head = new IconWidget(Icon.head(this.username));\n        head.addId(\"head\");\n        this.addChild(head);\n\n        ComponentWidget username = ComponentWidget.text(this.username);\n        username.addId(\"username\");\n        this.addChild(username);\n    }\n}\n</code></pre> <pre><code>.head {\n    // align left\n    left: 0;\n\n    // center vertically\n    top: 50%;\n    alignment-y: center;\n\n    width: 12;\n    height: 12;\n}\n\n.username {\n    // align next to the head\n    left: 14;\n\n    // center vertically\n    top: 50%;\n    alignment-y: center;\n\n    // width/height is set automatically for a ComponentWidget\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/lss/","title":"Understand LSS","text":"<p>If you've worked with CSS before, LSS shouldn't be all too new; both share a similar basic syntax. We have implemented LSS as a system to design and theme responsive GUIs (Screens) conveniently; no more OpenGL hustle, just Activities, Widgets, and LSS. </p>"},{"location":"pages/addon/activities/lss/#lss-in-a-nutshell","title":"LSS in a Nutshell","text":"<p>The main thing you need to know about LSS is that while you add LSS StyleSheets to your Activity, you can't manipulate Activities directly, only the Widgets inside of that Activity.  A list of all Widgets delivered with the API can be found here.</p> <p>CSS and LSS have very similar syntax, but here are some of their differences:</p> <ul> <li>CSS has classes, and LSS has ids that can be added to Widgets directly in the Activities Java code.</li> <li>In CSS, you can declare the type. You can do the same in LSS; there is one thing to keep in mind: if the name of a Widget ends with the suffix \"Widget\", the suffix gets removed (so, for example, <code>Component</code> instead of <code>ComponentWidget</code> or <code>Icon</code> instead of <code>IconWidget</code>).</li> <li>LSS has no types like <code>p</code> for pixels, etc. LSS always works with relative pixels (1 = one pixel on GUI scale 1, four pixels on GUI scale 2, and 16 pixels on GUI scale 3)</li> </ul>"},{"location":"pages/addon/activities/lss/#creating-activities-with-lss","title":"Creating Activities with LSS","text":"<p>Looking back at the last page, we created an Activity with a ComponentWidget but without LSS.  We'll again use the last page's result to make it work with LSS.</p> <p>We start by deleting the <code>postStyleSheetLoad</code> method, which we used before to set the position of our Widget.  As LSS is doing that now, we no longer need this method.  Now we head to our <code>resources</code> folder in the <code>core</code> module (<code>src/main/resources/</code>) and go to (or create) the following folder structure: <code>assets/example/themes/vanilla/lss/</code> (replace <code>example</code> with the namespace of your addon).  After that, create a new file called <code>example.lss</code>. </p> <p>Now the magic part: as we didn't set an id, we'll use the type.  We have a <code>ComponentWidget</code> in our Activity, so we're going to type <code>Component {</code> into the first line. As we want our Component centered, we'll add <code>left: 50%;</code> and <code>top: 50%;</code> to the following lines.  If we were doing that, the Component would start at 50% of the screen each, adding <code>alignment-x: center;</code> and <code>alignment-y: center;</code> as the following lines.  This will adjust the anchor point of the Widget to its center, so 50% from the left will be exactly at the center of the Widget. The last thing we'll need to do here is close the block with <code>},</code> and we're done.</p> <p>All we have to do now is go back to our Activity that uses LSS, add the <code>Link</code> annotation above and add \"example.lss\" as the annotation's argument. Theoretically, we're done. But there are a few things left that we can do.  For once, we can remove the field <code>componentWidget</code>, as we don't need the Widget anywhere else anymore. We can also remove the argument <code>NamedTextColor.GOLD</code> from the ComponentWidget's constructor call and add <code>text-color: gold;</code> to our LSS file. Now, there is one more thing we can do, and that is to add an id to our Widget.  We'll do this by just calling <code>componentWidget.addId(\"test-widget\")</code> and replacing <code>Component</code> in our LSS StyleSheet with <code>.test-widget</code>.  This will be very important when creating complex Activities so that blocks for the same Widget don't overwrite each other.</p> <p>And we're done. You can debug your Activity by pressing <code>CTRL + D</code> and pressing <code>ARROW RIGHT</code> until you see the name of your Activity if ever something doesn't work like expected.</p>"},{"location":"pages/addon/activities/lss/#lss-activity-result","title":"LSS Activity Result","text":"<p>Like before, this is what the code we described above would look like:</p>  ExampleLssActivity example.lss Result <pre><code>@AutoActivity\n@Link(\"example.lss\")\npublic class ExampleLssActivity extends SimpleActivity {\n\n  @Override\n  public void initialize(Parent parent) {\n    super.initialize(parent);\n\n    ComponentWidget componentWidget = ComponentWidget.text(\n        \"I am an example text rendered with a ComponentWidget set via LSS\"\n    );\n    componentWidget.addId(\"test-widget\");\n    this.document().addChild(componentWidget);\n  }\n}\n</code></pre> <pre><code>.test-widget {\n  left: 50%;\n  top: 50%;\n  alignment-x: center;\n  alignment-y: center;\n  text-color: gold;\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/lss/#injecting-blocks-into-other-stylesheets","title":"Injecting Blocks Into Other StyleSheets","text":"<p>todo: write</p>"},{"location":"pages/addon/activities/themes/","title":"Theming","text":"<p>One of the key advantages of our Activity System with LSS over OpenGL is that you can easily theme your Activities with LSS. With OpenGL you'd have to rewrite the screen for every theme you want to support. With LSS, just like with CSS, you can just have an LSS StyleSheet for each theme. You can also create your own theme. All that is explained on this page.</p> Important Note <p>Creating own themes doesn't work as of now. But we're working on it!</p>"},{"location":"pages/addon/activities/themes/#how-themes-work","title":"How Themes Work","text":"<p>There are two types of themes:</p> <ul> <li>Root themes</li> <li>Extending themes</li> </ul>"},{"location":"pages/addon/activities/themes/#root-themes","title":"Root themes","text":"<p>Root themes have no parent, everything that is not implemented is not there. This means that in this type of theme everything needs to be implemented. Usually this is just the vanilla theme as this is maintained by LabyMod and implemented by every addon using the Activity System.</p>"},{"location":"pages/addon/activities/themes/#extending-themes","title":"Extending themes","text":"<p>Extending themes are themes based off of another theme, for example the LabyMod fancy theme extends the vanilla theme. Everything that is not implemented will be inherited from its parent theme. When creating your own theme, you may want to extend the vanilla theme, or you can also extend any other extending theme like the fancy theme.</p> <p>If a resource (e.g. an LSS file, an image) or any kind of renderer is not found in an extending theme, it is simply taken from its parent.</p>"},{"location":"pages/addon/activities/themes/#theme-files","title":"Theme files","text":"<p>Besides any other file in your <code>assets/&lt;my namespace&gt;</code> folder there are also theme files located in <code>assets/&lt;my namespace&gt;/themes/&lt;theme&gt;</code> with the following structure:</p> <p></p> <p>Usually you don't need to access these files directly because LabyMod handles it for stuff like LSS stylesheets, icons in the settings and hud widgets. If you still need to access a ThemeFile, it works like this:</p> <pre><code>public ResourceLocation getThemeResource() {\n    Theme theme = Laby.references().themeService().currentTheme();\n    return theme.resource(\"my namespace\", \"textures/my-image.png\");\n}\n</code></pre>"},{"location":"pages/addon/activities/themes/#implement-an-existing-theme-in-your-addon","title":"Implement an existing theme in your addon","text":"<p>Coming from Understand LSS you already know how to create LSS stylesheets for the vanilla theme by putting them in <code>assets/example/themes/vanilla/lss/</code>. When implementing the fancy theme, you now want to put your new LSS stylesheets in <code>assets/example/themes/fancy/lss/</code> and name them exactly the same.</p> <p>Having done this, LabyMod will now select the LSS stylesheets from the fancy theme. If a stylesheet doesn't exist in the fancy theme, LabyMod will fall back to the stylesheet from the vanilla theme. The behavior is exactly the same for textures, you may have defined your textures for your settings in <code>assets/example/themes/vanilla/textures/settings.png</code>, now you can create a file with the same name in the directory for the fancy theme and LabyMod will find it automatically.</p>"},{"location":"pages/addon/activities/themes/#theme-your-activity","title":"Theme your activity","text":"<p>todo: add an example Activity</p>"},{"location":"pages/addon/activities/widgets/","title":"Use and Create Widgets","text":"<p>Widgets are a valuable and easy way to customize your Activities and are the backbone of every themeable Activity.</p>"},{"location":"pages/addon/activities/widgets/#use-widgets-in-activities","title":"Use Widgets in Activities","text":"<p>This part will show you how to use and integrate Widgets into your Activity. Looking back at our bare Activity example, we rendered the text <code>\"I am a bare rendered example text\"</code>, so we'll be using a ComponentWidget just this time with the text <code>\"I am an example text rendered with a ComponentWidget\"</code>. We're building onto the code from the previous example so if you haven't already gone through it, we recommend taking a look at it here.</p> Important Note <p>Remember that we're explaining the Activity System in multiple steps. This part of the page will explain how to create Activities with Widgets but without LSS. This is for example purposes only; we highly recommend using Widgets and LSS in your Activities, as the system is not optimized for Widgets without LSS. It is possible but don't expect your code to work forever; there is a high chance that the methods you use will be deprecated at any time.</p> <p>Looking back at the bare Activity example, we remove the <code>render</code> method overwrite, as we don't need that anymore because the ComponentWidget will render the text for us. Now we overwrite the <code>initialize</code> method. Keep in mind that the super call has to be at the head of the method body. The method will be called any time the window is resized, the Activity is manually reloaded, or when the Activity was opened.</p> <p>Then we create a new ComponentWidget. In this case, we will create a non-translatable ComponentWidget by calling <code>ComponentWidget.text</code> and declare our text as the first parameter. Because we want our text to be colored, we'll set the color of our choice as the second parameter, in this case, Gold. The call should look like this in the end: <code>ComponentWidget.text(\"I am an example text rendered with a ComponentWidget\", NamedTextColor.GOLD)</code>. Now we just declare it as a field and call <code>this.document().addChild(this.componentWidget)</code> as this will add the ComponentWidget to our Activity.</p> <p>Theoretically, we could start the client, and our text would be rendered. But we haven't set the position yet. We'll only look at LSS in the next part, so we need to set the position with our Java code. To do this, we need to overwrite the protected void <code>postStyleSheetLoad</code> and again keep the super call as it notifies all child widgets that the style sheets have been loaded. We don't use those yet, but we leave the call in anyways. This method is called when all style sheets have been loaded and applied, just as the name suggests.</p> <p>Now we get the bounds of our activity with <code>this.bounds()</code> and the bounds of our ComponentWidget via <code>this.componentWidget.bounds()</code> and set the position of said widget with <code>widgetBounds.setPosition(activityBounds.getCenterX(), activityBounds.getCenterY()</code>. As we want the ComponentWidget to be centered we need also to add <code>this.componentWidget.alignmentX().set(WidgetAlignment.CENTER)</code> and <code>this.componentWidget.alignmentY().set(WidgetAlignment.CENTER)</code> this centers the Widget horizontally and vertically. </p>"},{"location":"pages/addon/activities/widgets/#widget-activity-result","title":"Widget Activity Result","text":"<p>Like with the bare Activity, this is what the code we described above would look like:</p>  ExampleBareActivity Result <pre><code>@AutoActivity\npublic class ExampleWidgetActivity extends SimpleActivity {\n\n  private ComponentWidget componentWidget;\n\n  @Override\n  public void initialize(Parent parent) {\n    super.initialize(parent);\n\n    this.componentWidget = ComponentWidget.text(\n        \"I am an example text rendered with a ComponentWidget\",\n        NamedTextColor.GOLD\n    );\n    this.document().addChild(this.componentWidget);\n  }\n\n  @Override\n  protected void postStyleSheetLoad() {\n    super.postStyleSheetLoad();\n\n    Bounds activityBounds = this.bounds();\n    Bounds widgetBounds = this.componentWidgetBounds.bounds();\n    componentWidgetBounds.setPosition(\n        activityBounds.getCenterX(),\n        activityBounds.getCenterY()\n    );\n\n    this.componentWidget.alignmentX().set(WidgetAlignment.CENTER);\n    this.componentWidget.alignmentY().set(WidgetAlignment.CENTER);\n  }\n}\n</code></pre> <p></p>"},{"location":"pages/addon/activities/widgets/#all-widgets","title":"All Widgets","text":"<p>Below listed are all Widgets for use. They can be extended and modified for a more specific use case. </p> <p>Every Widget also has the LSS Properties from <code>AbstractWidget</code></p> Important Note <p>The LSS Properties noted here might be outdated and/or incomplete.</p>"},{"location":"pages/addon/activities/widgets/#input-widgets","title":"Input Widgets","text":"<p>Input Widgets are Widgets that allow direct user input.</p>"},{"location":"pages/addon/activities/widgets/#button","title":"Button","text":"<p>The <code>ButtonWidget</code> is an Input-Widget that performs a specific action (set with <code>setPressable(Pressable)</code>) when pressed.  It can be created with a String with <code>ButtonWidget.text</code> and a Component with <code>ButtonWidget.component</code>.  The Widget has the following LSS properties: </p> <ul> <li>Everything from <code>HorizontalListWidget</code> (because the Button can have an Icon)</li> <li>icon </li> </ul>"},{"location":"pages/addon/activities/widgets/#check-box","title":"Check Box","text":"<p>The <code>CheckBoxWidget</code> is an Input-Widget that switches between two states (<code>CHECKED</code> and <code>UNCHECKED</code>) when pressed but can also have the state <code>PARTLY</code>, but that can only be set via <code>setState(State)</code>. It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#color-picker","title":"Color Picker","text":"<p>The <code>ColorPickerWidget</code> is an Input-Widget that opens an Overlay when clicked where the user can select a specific color. It can be created via its constructor.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#dropdown","title":"Dropdown","text":"<p>The <code>DropdownWidget</code> is an Input-Widget that opens an Overlay when clicked in which the user can select an entry. The Widget is generic; you have to specify the type of the entries (preferably String or any Enum) as the argument.  Entries can be added with <code>add(GenericType)</code>, <code>addAll(GenericType[])</code> and <code>addAll(List&lt;GenericType&gt;)</code>. Translatable by calling <code>translationKeyPrefix(String)</code>, It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#keybind","title":"Keybind","text":"<p>The <code>KeybindWidget</code> is an Input-Widget that allows the user to set a specific Key.  It also accepts mouse buttons when expressly set with <code>acceptMouseButtons(Boolean)</code>. It can be created via its constructor.  The Widget has the same LSS properties as <code>TextFieldWidget</code>.</p>"},{"location":"pages/addon/activities/widgets/#multi-keybind","title":"Multi Keybind","text":"<p>The <code>MultiKeybindWidget</code> is an Input-Widget that allows users to set multiple keys simultaneously.  It can be created via its constructor.  The Widget has the same LSS properties as <code>TextFieldWidget</code>.</p>"},{"location":"pages/addon/activities/widgets/#slider","title":"Slider","text":"<p>The <code>SliderWidget</code> is an Input-Widget that allows users to select a specific number inside a set range (default is 0-100).  The Range can be set with <code>range(Float, Float)</code> and the steps with <code>steps(Float)</code>. It can be created via its constructor.   The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#switch","title":"Switch","text":"<p>The <code>SwitchWidget</code> is an Input-Widget that allows the user to enable or disable a certain feature.  Can be created with <code>SwitchWidget.create(Switchable)</code>, <code>SwitchWidget.text(String, String, Switchable)</code> or <code>SwitchWidget.translatable(String, String, Switchable)</code>.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#text-field","title":"Text Field","text":"<p>The <code>TextFieldWidget</code> is an Input-Widget that allows the user to type in any text.  Typed-in text can be validated by calling <code>validator(Predicate)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>cursor-color</code> - the color of the cursor (default is <code>white</code>)</li> <li><code>font-size</code> - size of the text (default is <code>1.0</code>)</li> <li><code>mark-color</code> - the color of the marked background (default is <code>-1</code>)</li> <li><code>mark-text-color</code> - color of the marked text (default is <code>rgb(32, 32, 170)</code>)</li> <li><code>place-holder-color</code> - the color of the placeholder text (default is <code>dark-gray</code>)</li> <li><code>text-alignment-x</code> - either <code>left</code>, <code>center</code> or <code>right</code> (default is <code>left</code>)</li> <li><code>text-alignment-y</code> - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>)</li> <li><code>text-color</code> - the color of the text (default is <code>white</code>)</li> <li><code>type</code> - either <code>default</code> or <code>vanilla-window</code> (default is <code>default</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#grid-widgets","title":"Grid Widgets","text":"<p>Grid Widgets are Widgets that automatically set the position of children in a specific way.</p>"},{"location":"pages/addon/activities/widgets/#horizontal-list","title":"Horizontal List","text":"<p>The <code>HorizontalListWidget</code> is a Grid-Widget that displays all its entries in a horizontal list. Add entries by executing <code>addEntry(Widget)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>layout</code> - the layout of the list - either <code>spread</code>, <code>fill</code> or <code>stack</code> (default is <code>stack</code>) </li> <li><code>space-between-entries</code> - the space between each entry (default is <code>1</code>) </li> </ul>"},{"location":"pages/addon/activities/widgets/#tiles-grid","title":"Tiles Grid","text":"<p>The <code>TilesGridWidget</code> is a Grid-Widget that displays all its tiles in a specific grid that can be set via LSS.  The Widget is generic; you have to specify the type of widgets you want to add as the argument. Tiles can be added via <code>addTile(GenericType)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>space-between-entries</code> - the space between each entry (default is <code>0</code>) </li> <li><code>tile-height</code> - the height of the tiles - set to <code>-1</code> to make the tiles a square (default is <code>-1</code>) </li> <li><code>tiles-per-line</code> - the number of tiles per line (default is <code>3</code>) </li> </ul>"},{"location":"pages/addon/activities/widgets/#vertical-list","title":"Vertical List","text":"<p>The <code>VerticalListWidget</code> is a Grid-Widget that displays all its entries in a vertical list.  The Widget is generic; you have to specify the type of widgets you want to add as the argument. Children can be added via <code>addChild(GenericType)</code>. It can be created with the default constructor (no arguments needed).  The Widget has the following LSS properties: </p> <ul> <li><code>list-alignment</code> - the alignment the children should have inside the list - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>) </li> <li><code>list-order</code> - the order of the children - either <code>normal</code> or <code>reverse</code> (default is <code>normal</code>)</li> <li><code>overwrite-width</code> - if the width of children should be set to the with of the list (default is <code>true</code>)</li> <li><code>render-out-of-bounds</code> - if the children should be rendered out of bounds, it makes sense if the Widget is inside a <code>ScrollWidget</code> (default is <code>false</code>)</li> <li><code>selectable</code> - if the children should be selected on click (default is <code>false</code>)</li> <li><code>space-between-entries</code> - the space between each entry (default is <code>1</code>) </li> <li><code>squeeze-height</code> - if children that would have been rendered out of bounds should be squeezed to stay in the bounds (default is <code>false</code> - use with caution!)</li> </ul>"},{"location":"pages/addon/activities/widgets/#utility-widgets","title":"Utility Widgets","text":"<p>Utility Widgets are Widgets that can be useful for any Activity. </p>"},{"location":"pages/addon/activities/widgets/#component","title":"Component","text":"<p>The <code>ComponentWidget</code> is a Utility-Widget that displays any Component. Can be created with <code>ComponentWidget.text</code>, <code>Componentwidget.i18n</code> and <code>ComponentWidget.component</code>. Each factory method has multiple implementations.  The Widget has the following LSS properties: </p> <ul> <li><code>allow-colors</code> - if the color of the component should be used (default is <code>true</code>)</li> <li><code>font-size</code> - how much the component should be scaled (default is <code>1.0</code>)</li> <li><code>line-spacing</code> - the spacing between multiple lines if <code>overflow-strategy</code> is <code>wrap</code> (default is <code>0.0</code>)</li> <li><code>max-lines</code> - the number of maximum lines that should be displayed if <code>overflow-strategy</code> is <code>wrap</code> (default is <code>0</code>, set to <code>0</code> to disable)</li> <li><code>overflow-strategy</code> - the strategy that is applied when text is longer than the bounds allow - either <code>wrap</code> or <code>clip</code> (default is <code>wrap</code>)</li> <li><code>scale-to-fit</code> - if the component should be scaled to fit the bounds if it would overflow (default is <code>false</code>)</li> <li><code>shadow</code> - if the component should have a shadow (default is <code>true</code>)</li> <li><code>text-color</code> - the color of the component (default is <code>-1</code>, set to <code>-1</code> to disable)</li> </ul>"},{"location":"pages/addon/activities/widgets/#div","title":"Div","text":"<p>The <code>DivWidget</code> is a Utility-Widget that does nothing special, as it is just an implementation of <code>SimpleWidget</code> and can be used for creating simple containers without automatic alignment.  It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#fading","title":"Fading","text":"<p>The <code>FadingWidget</code> is a Utility-Widget that slowly fades out at a specific timestamp. It can be created with either <code>FadingWidget.until(Widget, Long)</code> to specify a timestamp or <code>FadingWidget.forMillis(Widget, Long)</code> to specify the milliseconds until the Widget fades.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#hr","title":"Hr","text":"<p>The <code>HrWidget</code> is a Utility-Widget that acts as a separator between Widgets.  It renders a line with the size of the Widget's inner bounds (only in the Fancy Theme!) It can be created with the default constructor (no arguments needed).  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#icon","title":"Icon","text":"<p>The <code>IconWidget</code> is a Utility-Widget that renders an <code>Icon</code>. It can be created via its constructor.  The Widget has the following LSS properties: </p> <ul> <li><code>icon</code> - the rendered Icon (the argument sets the default value in the constructor)</li> <li><code>color</code> - the color of the Icon (default is <code>-1</code>)</li> <li><code>object-fit</code> - the fit of the Icon inside the Widget's bounds - either <code>fill</code>, <code>contain</code>, <code>cover</code>, <code>scale-down</code> or <code>none</code> (default is <code>fill</code>)</li> <li><code>clickable</code> - if the Icon should be slightly zoomed when hovered (default is <code>false</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#screen-renderer","title":"Screen Renderer","text":"<p>The <code>ScreenRendererWidget</code> is a Utility-Widget that renders any Activity inside the bounds of the Widget. It can be created with its constructor. Calling the default constructor doesn't forward the style.  The Widget has the following LSS properties: </p> <ul> <li><code>interactable</code> - if the user should be able to interact with the rendered screen (default is <code>true</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#scroll","title":"Scroll","text":"<p>The <code>ScrollWidget</code> is a Utility-Widget that allows scrolling Widgets vertically (preferably <code>VerticalListWidget</code> or <code>TilesGridWidgets</code>).  It automatically adds a <code>ScrollbarWidget</code> as its second child. The child has to have their height set to <code>fit-content</code>, and the <code>ScrollWidget</code>'s height has to be fixed for everything to work. Can be created with either <code>new ScrollWidget(VerticalListWidget)</code> or <code>new ScrollWidget(Widget, ListSession&lt;&gt;)</code>.  The Widget has the following LSS properties: </p> <ul> <li><code>enable-scroll-content</code> - if content should be scrolled when dragging the mouse (default is <code>false</code>)</li> <li><code>scrollSpeed</code> - how fast the content should be scrolled (default is <code>-1</code>, set to <code>-1</code> to calculate the scroll speed automatically based on the number of children)</li> <li><code>child-align</code> - where the content should be aligned - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#scrollbar","title":"Scrollbar","text":""},{"location":"pages/addon/activities/widgets/#abstract-widgets","title":"Abstract Widgets","text":"<p>Abstract Widgets are not for direct use and are therefore intended exclusively for inheritance and extension.</p>"},{"location":"pages/addon/activities/widgets/#abstract-widget","title":"Abstract Widget","text":"<p>The <code>AbstractWidget</code> is the main implementation of almost every Widget.  The generic type declares the type of its children.  The Widget and, therefore all inheriting Widgets have the following LSS properties (if no default value is specified, the default value is <code>null</code>, and the property has to be set to take effect)  As there are so many, they are split into different sections:</p>"},{"location":"pages/addon/activities/widgets/#positioning-bounds","title":"Positioning (Bounds)","text":"<p>Every property (except the <code>padding</code> and <code>margin</code> allrounder) in this section can also have a percentage. The <code>width: 5%</code> will result in the width being 5% of the parent's width.</p> <ul> <li><code>left</code> - the relative left position to the parent</li> <li><code>top</code> - the relative top position to the parent</li> <li><code>right</code> - the relative right position to the parent</li> <li><code>bottom</code> - the relative bottom position to the parent</li> <li><code>width</code> - the width (can be a number but also <code>fit-content</code> or <code>height</code>)</li> <li><code>height</code> - the height (can be a number but also <code>fit-content</code> or <code>width</code>)</li> <li><code>max-width</code> - the maximum width (useful when the widget has no fixed width)</li> <li><code>max-height</code> - the maximum height (useful when the Widget has no fixed height)</li> <li><code>min-width</code> - the minimum width (useful when the Widget has no fixed width)</li> <li><code>min-height</code> - the minimum height (useful when the Widget has no fixed height)</li> <li><code>padding</code> - the padding (has to be this format: <code>TOP RIGHT BOTTOM LEFT</code> or just one number to set the same padding in all directions)</li> <li><code>padding-top</code> - the padding at the top (default is <code>0.0</code>)</li> <li><code>padding-right</code> - the padding at the right (default is <code>0.0</code>)</li> <li><code>padding-bottom</code> - the padding at the bottom (default is <code>0.0</code>)</li> <li><code>padding-left</code> - the padding at the left (default is <code>0.0</code>)</li> <li><code>margin</code> - the margin (has to be this format: <code>TOP RIGHT BOTTOM LEFT</code> or just one number to set the same margin in all directions)</li> <li><code>margin-top</code> - the margin at the top (default is <code>0.0</code>)</li> <li><code>margin-right</code> - the margin at the right (default is <code>0.0</code>)</li> <li><code>margin-bottom</code> - the margin at the bottom (default is <code>0.0</code>)</li> <li><code>margin-left</code> - the margin at the left (default is <code>0.0</code>)</li> <li><code>alignment-x</code> - the horizontal anchor point of the widget - either <code>left</code>, <code>center</code> or <code>right</code> (default is <code>left</code>)</li> <li><code>alignment-y</code> - the vertical anchor point of the widget - either <code>top</code>, <code>center</code> or <code>bottom</code> (default is <code>top</code>)</li> <li><code>use-floating-point-position</code> - if the position should use Float instead of Integer (default is <code>false</code> in Vanilla- and <code>true</code> in Fancy-Theme)</li> <li><code>fit-outer</code> - if fit-content should be applied to the outer instead of the inner bounds of the children (default is <code>false</code>)</li> <li><code>box-sizing</code> - how the width and height should be calculated - either <code>content-box</code> or <code>border-box</code> (default is <code>content-box</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#visual","title":"Visual","text":"<ul> <li><code>animation-duration</code> - the duration of the animation - in milliseconds (default is <code>0</code>)</li> <li><code>animation-timing-function</code> - how animations should be interpolated - either <code>linear</code>, <code>ease-in-out</code>, <code>ease-in</code> or <code>ease-out</code> (default is <code>ease-in-out</code>)</li> <li><code>background-color</code> - the color of the background (default is 0, set to 0 to disable)</li> <li><code>background-dirt-brightness</code> - the brightness of the dirt background (default is <code>32</code>)</li> <li><code>filter</code> - filters that should be applied - possible are <code>blur(RADIUS)</code> and <code>stencil-background</code></li> <li><code>font-weight</code> - the weight of the font</li> <li><code>opacity</code> - the opacity - has to be between <code>0.0</code> and <code>1.0</code> (default is <code>1.0</code>)</li> <li><code>render-children</code> - if the children should be rendered (default is <code>true</code>)</li> <li><code>renderer</code> - which <code>ThemeRenderer</code> the Widget uses</li> <li><code>scale</code> - the scale in which the Widget is rendered (default is <code>1.0</code>)</li> <li><code>visible</code> - if the widget is visible or not (default is <code>true</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#behavioral","title":"Behavioral","text":"<ul> <li><code>always-focused</code> - if the Widget should always have the attribute <code>FOCUSED</code> (default is <code>false</code>)</li> <li><code>background-always-dirt</code> - if the background should always stay dirt, even if ingame (default is <code>false</code>)</li> <li><code>background-dirt-shift</code> - the shift of the dirt background</li> <li><code>draggable</code> - if the Widget can be dragged (default is <code>false</code>)</li> <li><code>interactable</code> - if the widget can be interacted with (default is <code>true</code>)</li> <li><code>mouse-render-distance</code> - in which distance to your mouse the Widget will get visible (default is <code>0.0</code>, set to <code>0.0</code> to disable)</li> <li><code>pressable</code> - if clicking the widget fires the <code>Pressable</code> callback (default is <code>true</code>)</li> <li><code>priority-layer</code> - depending on what is set the Widget will be rendered before everything else or after - either <code>very-back</code>, <code>back</code>, <code>normal</code>, <code>front</code>, <code>very-front</code> (default is <code>normal</code>)</li> <li><code>stencil</code> - if the widget content should not be able out of bounds (default is <code>false</code>)</li> </ul>"},{"location":"pages/addon/activities/widgets/#list-widget","title":"List Widget","text":"<p>The <code>ListWidget</code> is the parent of every list like Widget.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#simple-widget","title":"Simple Widget","text":"<p>The <code>SimpleWidget</code> inherits <code>AbstractWidget</code> and removes the generic.  The Widget has no own LSS properties.</p>"},{"location":"pages/addon/activities/widgets/#wrapped-widget","title":"Wrapped Widget","text":"<p>The <code>WrappedWidget</code> is a \"pseudo Widget\" that wraps around its child and acts like it.  The Widget has no LSS properties as it redirects everything to its child. deprecated!</p>"},{"location":"pages/addon/features/commands/","title":"Create Commands","text":"<p>With LabyMod 4, you can easily create custom client-side commands. This page will show you how.</p>"},{"location":"pages/addon/features/commands/#the-super-method","title":"The Super Method","text":"<p>The first parameter in the super constructor call is the prefix, see it as the name of your command. Every parameter after is an alias and thus optional.</p>"},{"location":"pages/addon/features/commands/#the-execute-method","title":"The Execute Method","text":"<p>The execute method contains the code that is executed if the player is using your command. If you return <code>true</code>, the command will be consumed by LabyMod. If you return <code>false</code>, the command will not be consumed and will be sent to the server.</p> <p>Before you're able to use and test your command in-game, you'll need to register the command by calling  <code>this.registerCommand(new ExampleCommand());</code> in your main class. You don't need to do anything else, after registering the command and restarting LabyMod you can submit \"/notify\" or \"/alias\" in the ingame-chat and your command will be executed.</p>"},{"location":"pages/addon/features/commands/#subcommands","title":"Subcommands","text":"<p>You can also add subcommands to your command. To do so, you'll need to create a new class that inherits from <code>SubCommand</code> and add it to your command by calling <code>this.withSubCommand(new ExampleSubCommand());</code> in your command's constructor. You can set the sub command's name and aliases the same way you set the command's name with the super constructor call.</p>  ExampleCommand ExampleSubCommand <pre><code>public class ExampleCommand extends Command {\n\n    private final NotificationController notificationController;\n\n    public ExampleCommand() {\n        super(\"notify\", \"alias\");\n        this.notificationController = Laby.references().notificationController();\n        this.withSubCommand(new ExampleSubCommand());\n    }\n\n    @Override\n    public boolean execute(String prefix, String[] arguments) {\n        if (prefix.equalsIgnoreCase(\"alias\")) {\n            this.displayMessage(Component.text(\"You used an Alias!\", NamedTextColor.AQUA));\n            return false;\n        }\n\n        String title;\n        String text;\n\n        if (arguments.length &lt; 2) {\n            title = \"Title\";\n            text = \"Text\";\n        } else {\n            title = arguments[0];\n            text = arguments[1];\n        }\n        notificationController.push(\n            Notification.builder()\n                .title(Component.text(title))\n                .text(Component.text(text))\n                .build()\n        );\n        return true;\n    }\n}\n</code></pre> <pre><code>public class ExampleSubCommand extends SubCommand {\n\n    private final NotificationController notificationController;\n\n    public ExampleSubCommand() {\n        super(\"sub\");\n        this.notificationController = Laby.references().notificationController();\n    }\n\n    @Override\n    public boolean execute(String prefix, String[] arguments) {\n        notificationController.push(\n            Notification.builder()\n                .title(Component.text(\"Success!\"))\n                .text(Component.text(\"You used a subcommand!\"))\n                .build()\n        );\n        return true;\n    }\n}\n</code></pre>"},{"location":"pages/addon/features/config/","title":"Creating a Configuration","text":"<p>From using our predefined setting widgets over creating your own, to a few things that didn't fit in with the rest. This page will show you everything there is to know about our configuration system.</p>"},{"location":"pages/addon/features/config/#create-a-basic-configuration","title":"Create a Basic Configuration","text":"<p>You can create your configuration by creating a new class and inheriting <code>AddonConfig</code>. This superclass requires you to implement the <code>enabled</code> method, as we want to allow servers to disable every addon they want. </p> <p>The only thing you always need to keep in mind while creating a configuration besides the type you need to inherit is that you need to use the <code>ConfigProperty</code> type for your settings, but just for specific types that you might want to use. More on which types you can use by default here. For any other types, use the type itself without declaring it as an argument on <code>ConfigProperty</code>.</p> <p>To create a setting that represents if your addon is enabled or not, you need to create a new field with the type <code>ConfigProperty</code>. Now add the type of your setting, in this case, <code>Boolean</code> as boolean. Now instantiate this property by declaring a new ConfigProperty with the default value as the argument, well use <code>true</code> as the default value. The result would look like this <code>ConfigProperty&lt;Boolean&gt; enabled = new ConfigProperty&lt;&gt;(true)</code>. Now, if we want to use this property in an event, we'll get the property (preferably by its getter) and call <code>get()</code>. This will get us the value of the property.</p> <p>You can only use various types for your <code>ConfigProperty</code> by default.  The current valid types are:</p> <ul> <li>String</li> <li>Character</li> <li>Boolean</li> <li>Integer</li> <li>Long</li> <li>Double</li> <li>Float</li> <li>Short</li> <li>Byte</li> <li>any Enum</li> <li>Key</li> <li>MouseButton</li> <li>ResourceLocation</li> <li>Color (net.labymod.api.util)</li> </ul>"},{"location":"pages/addon/features/config/#using-predefined-setting-widgets","title":"Using Predefined Setting Widgets","text":"<p>The following content lists all of our Setting Widgets that will be served by using the Addon API, with possible arguments (brackets surround optional arguments), compatible types, and a short description that you can create via an annotation:</p>"},{"location":"pages/addon/features/config/#switch-widget","title":"Switch Widget","text":"<p>Annotation: <code>SwitchSetting</code>  Arguments: none  Compatible Type: <code>Boolean</code>  Description: </p>"},{"location":"pages/addon/features/config/#slider-widget","title":"Slider Widget","text":"<p>Annotation: <code>SliderSetting</code>  Arguments: <code>min</code> - smallest value possible, <code>max</code> - biggest value possible, (<code>steps</code> - the amount of how much the value will increase/decrease on each move - default is 1)  Compatible Types: <code>Integer</code>, <code>Float</code>, <code>Double</code>, <code>Short</code>, <code>Byte</code>, <code>Long</code>  Description: </p>"},{"location":"pages/addon/features/config/#text-field-widget","title":"Text Field Widget","text":"<p>Annotation: <code>TextFieldSetting</code>  Arguments: (<code>maxLength</code> - the maximal length of the string entered)  Compatible Type: <code>String</code>  Description: </p>"},{"location":"pages/addon/features/config/#key-bind-widget","title":"Key Bind Widget","text":"<p>Annotation: <code>KeyBindSetting</code>  Arguments: none  Compatible Type: <code>Key</code>  Description: </p>"},{"location":"pages/addon/features/config/#multi-key-bind-widget","title":"Multi Key Bind Widget","text":"<p>Annotation: <code>MultiKeyBindSetting</code>  Arguments: none  Compatible Type: <code>Key[]</code>  Description: </p>"},{"location":"pages/addon/features/config/#color-picker-widget","title":"Color Picker Widget","text":"<p>Annotation: <code>ColorPickerSetting</code>  Arguments: (<code>alpha</code> - whether the user should be able to change the transparency - default is false)  Compatible Type: <code>Integer</code>  Description: </p>"},{"location":"pages/addon/features/config/#dropdown-widget","title":"Dropdown Widget","text":"<p>Annotation: <code>DropdownSetting</code>  Arguments: none  Compatible Types: any enum  Description: </p>"},{"location":"pages/addon/features/config/#button-widget","title":"Button Widget","text":"<p>Annotation: <code>ButtonSetting</code>  Arguments: none  Compatible Types: any public method annotated with <code>@MethodOrder</code> and with a <code>Setting</code> object as the only parameter. It's not supposed to return ConfigProperty Description: </p>"},{"location":"pages/addon/features/config/#activity-widget","title":"Activity Widget","text":"<p>Annotation: <code>ActivitySetting</code>  Arguments: none  Compatible Types: any public method that returns an Activity, not ConfigProperty Description: </p>"},{"location":"pages/addon/features/config/#further-customize-the-settings","title":"Further Customize the Settings","text":"<p>In addition to using predefined widgets for your settings, you also have a few other options to customize them.  The following points are not very precisely explained, but you can see everything from the following subsections and most of the subsections before in this section.</p>"},{"location":"pages/addon/features/config/#create-sections","title":"Create Sections","text":"<p>You can create sections in your settings; you just have to add the annotation <code>@SettingSection</code> above the first field that you want to have in said section. Now all you have to do is set the identifier as the annotation's parameter and add it to your internationalization file. </p>"},{"location":"pages/addon/features/config/#create-sub-settings","title":"Create Sub Settings","text":"<p>If you want more structure in your settings but don't want to use Sections, you can create sub-settings that can be accessed via a button. Just create a new class, and let it inherit from <code>Config</code>. Add a field with the same type in your configuration (just the type, not a <code>ConfigProperty</code>) and create a new instance of said class. You might have noticed that you don't have to use the <code>AddonConfig</code> superclass for sub-settings. The <code>AddonConfig</code> class is required for your main configuration but not for sub-settings.</p> <p>If you want to display more than just the advanced button (the button that lets you access the sub-settings), add the <code>@ShowSettingInParent</code> annotation to the most important switch in your sub-settings.</p>"},{"location":"pages/addon/features/config/#use-icons-for-settings","title":"Use Icons for Settings","text":"<p>To display icons in front of your settings, you'll need to declare a sprite texture with the <code>@SpriteTexture</code> annotation. Set the name of your file as the value of the annotation (the base path is <code>assets/NAMESPACE/themes/THEME/textures/sprite</code>, while the namespace is the namespace you set in your <code>build.gradle.kts</code> and the theme to the current theme. If you want your icons to be visible in all themes, put the texture in the vanilla theme). More on sprite textures here. </p>"},{"location":"pages/addon/features/config/#example-of-the-previous-sections","title":"Example of the Previous Sections","text":"<p>These are some example files showing a few of the functions mentioned before.</p>  ExampleConfiguration ExampleSubSetting ExampleEnum en_us.json Result <pre><code>@ConfigName(\"settings\")\n@SpriteTexture(\"example_sprite.png\")\npublic class ExampleConfiguration extends AddonConfig {\n\n  @SpriteSlot(x = 1, y = 1)\n  @SwitchSetting\n  private ConfigProperty&lt;Boolean&gt; enabled = new ConfigProperty&lt;&gt;(true);\n\n  @SettingSection(\"print\")\n  @SpriteSlot(x = 6)\n  @TextFieldSetting\n  private ConfigProperty&lt;String&gt; text = new ConfigProperty&lt;&gt;(\"Hello World!\");\n\n  @SettingSection(\"miscellaneous\")\n  @SpriteSlot(x = 1, y = 3)\n  private ExampleSubSettings subSettings = new ExampleSubSettings();\n\n  @SpriteSlot(y = 3)\n  @DropdownSetting\n  private ConfigProperty&lt;ExampleEnum&gt; type = new ConfigProperty&lt;&gt;(ExampleEnum.SCALENE_TRIANGLE);\n\n  @MethodOrder(after = \"text\")\n  @SpriteSlot(x = 2, y = 6)\n  @ButtonSetting\n  public void print(Setting setting) {\n    Notification.Builder builder = Notification.builder()\n        .title(Component.text(\"INFO\"))\n        .text(Component.text(setting.getId() + \" was clicked! \" + this.text))\n        .type(Type.SYSTEM);\n    Laby.labyAPI().notificationController().push(builder.build());\n  }\n\n  @Override\n  public ConfigProperty&lt;Boolean&gt; enabled() {\n    return this.enabled;\n  }\n}\n</code></pre> <pre><code>public class ExampleSubSettings extends Config {\n\n  @ShowSettingInParent\n  @SpriteSlot(x = 7)\n  @SwitchSetting\n  private ConfigProperty&lt;Boolean&gt; enabled = new ConfigProperty&lt;&gt;(true);\n\n  @SpriteSlot(x = 1, y = 6)\n  @ColorPickerSetting\n  private ConfigProperty&lt;Integer&gt; labyModColor = new ConfigProperty&lt;&gt;(\n      new Color(10, 85, 165).getRGB());\n\n  @SpriteSlot(x = 2)\n  @KeyBindSetting\n  private ConfigProperty&lt;Key&gt; keyBind = new ConfigProperty&lt;&gt;(Key.F);\n}\n</code></pre> <pre><code>public enum ExampleEnum {\n    HEART, CIRCLE, RECTANGLE, TRIANGLE, SCALENE_TRIANGLE;\n}\n</code></pre> <pre><code>{\n  \"example\": {\n    \"settings\": {\n      \"name\": \"ExampleAddon\",\n      \"enabled\": {\n        \"name\": \"Enabled\"\n      },\n      \"text\": {\n        \"name\": \"Text to be Printed\"\n      },\n      \"print\": {\n        \"name\": \"Click Me to Print the Text\",\n        \"text\": \"Print!\"\n      },\n      \"subSettings\": {\n        \"name\": \"Miscellaneous Sub Settings\",\n        \"labyModColor\": {\n          \"name\": \"The LabyMod Color\"\n        },\n        \"keyBind\": {\n          \"name\": \"Key Bind\"\n        }\n      },\n      \"type\": {\n        \"name\": \"Display Type\",\n        \"entries\": {\n          \"heart\": \"Heart\",\n          \"circle\": \"Circle\",\n          \"rectangle\": \"Rectangle\",\n          \"triangle\": \"Triangle\",\n          \"scaleneTriangle\": \"Weird Shape\"\n        }\n      },\n      \"header\": {\n        \"print\": {\n          \"name\": \"Print!\"\n        },\n        \"miscellaneous\": {\n          \"name\": \"Miscellaneous\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p></p>"},{"location":"pages/addon/features/config/#config-versioning","title":"Config Versioning","text":"<p>If you want to push an update for your addon which breaks existing configs it would be a great idea to write a little config migrator class which converts the old json file to your new config format. The first step would be increasing the current version of your addon config by one. You do so by overriding the <code>AddonConfig#getConfigVersion</code> method in your config implementation. <pre><code>@Override\npublic int getConfigVersion() {\n  return 2;\n}\n</code></pre> The next step is creating a class which actually migrates the old config values to the new one.</p>  ConfigVersionListener <pre><code>public class ConfigVersionListener {\n\n  @Subscribe\n  public void onConfigVersionUpdate(ConfigurationVersionUpdateEvent event) {\n    // Get the config class so you can differantiate which config is being updated\n    Class&lt;? extends Config&gt; configClass = event.getConfigClass();\n    // This is the version which the old config is in\n    int usedVersion = event.getUsedVersion();\n\n    // Check if it's really your config\n    if (configClass == YourConfigClass.class) {\n      if (usedVersion == 1) {\n        // The current config json object\n        JsonObject config = event.getJsonObject();\n\n        // Keep the value of a renamed ConfigProperty\n        if(config.has(\"oldConfigOptionName\")) {\n          // You'd have to adapt the #getAsString to your property type of course\n          config.set(\"newConfigOptionName\", config.get(\"oldConfigOptionName\").getAsString());\n        }\n\n        // Add default values to a newly created array\n        JsonArray myNewArrayProperty = new JsonArray();\n        // JsonArray#add(String) can't be used unfortunately because the method does not exist in the gson version used in labymod 1.8\n        myNewArrayProperty.add(new JsonPrimitive(\"array value number 1\"));\n        myNewArrayProperty.add(new JsonPrimitive(\"array value number 2\"));\n        myNewArrayProperty.add(new JsonPrimitive(\"array value number 3\"));\n\n        config.add(\"myNewArrayProperty\", myNewArrayProperty);\n\n        /*\n          You don't really have to remove old json values of removed ConfigProperties\n          as they're removed when the config is being loaded anyway\n        */\n\n        // Finally set the modified config object\n        event.setJsonObject(config);\n      } else if (usedVersion == 2) {\n        // If the addon's config is already on version 2 and you need to migrate it to version 3 for example\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pages/addon/features/custom-settings/","title":"Custom Setting types","text":"<p>Additionally to the predefined setting types discussed in the last page, you can also create your own types to create more complex settings like the VoiceChat.</p> <p></p> <p>In this example we will create a custom setting widget with a Dropdown and a Button, possible use cases for this may include a list with some kind of values and a refresh button to refresh the values. The selected value shall be stored in the config.</p>"},{"location":"pages/addon/features/custom-settings/#register-your-own-setting-type","title":"Register Your Own Setting Type","text":"CustomSettingWidget custom-setting-widget.lss MyAddonConfig Result <pre><code>@AutoWidget\n@SettingWidget // Important to be able to use this widget in the settings\n@Link(\"custom-setting-widget.lss\")\npublic class CustomSettingWidget extends HorizontalListWidget {\n\n    private final String customText;\n    private final String initialValue;\n\n    private Consumer&lt;String&gt; customUpdateListener;\n\n    public CustomSettingWidget(String customText, String initialValue) {\n        this.customText = customText;\n        this.initialValue = initialValue;\n    }\n\n    public void setCustomUpdateListener(Consumer&lt;String&gt; customUpdateListener) {\n        this.customUpdateListener = customUpdateListener;\n    }\n\n    @Override\n    public void initialize(Parent parent) {\n        super.initialize(parent);\n\n        // Define your custom widget\n\n        // You can also use other methods like mouseClicked(), fileDropped(), renderWidget(), etc.\n        // as described earlier\n\n        DropdownWidget&lt;String&gt; dropdown = new DropdownWidget&lt;&gt;();\n        dropdown.addAll(new String[]{\"first\", \"second\", \"third\"});\n        dropdown.addId(\"custom-dropdown\");\n\n        dropdown.setChangeListener(value -&gt; {\n            if (this.customUpdateListener != null) {\n                this.customUpdateListener.accept(value);\n            }\n        });\n\n        if (this.initialValue != null) {\n            dropdown.setSelected(this.initialValue);\n        }\n\n        this.addEntry(dropdown);\n\n        ButtonWidget button = ButtonWidget.text(this.customText);\n        button.setPressListener(() -&gt; {\n            System.out.println(\"Button pressed\");\n            return true;\n        });\n        button.addId(\"custom-button\");\n        this.addEntry(button);\n    }\n\n    @SettingElement(\n        // extended is optional: moves your widgets below the title of the settings\n        // instead of right to it, giving you more space\n        extended = false\n    )\n    @Target({ElementType.FIELD}) // may also be METHOD if your setting should be used on methods\n    @Retention(RetentionPolicy.RUNTIME)\n    public @interface MyCustomSetting {\n\n        // Define your custom values here,\n        // or define none if you don't need any\n\n        String customText() default \"Refresh\";\n    }\n\n    /**\n     * Factory for CustomSettingWidgets, can be used in configurations via @MyCustomSetting\n     */\n    @SettingFactory\n    public static class Factory implements WidgetFactory&lt;MyCustomSetting, CustomSettingWidget&gt; { \n\n        @Override\n        public Class&lt;?&gt;[] types() {\n            // The types of config values that this setting supports.\n            // For example in a slider this could be all numbers: PrimitiveHelper.NUMBER_PRIMITIVES\n            // It can also be an empty array if you don't care about the type (e.g. on a method instead of a field)\n            return new Class[]{String.class};\n        }\n\n        @Override\n        public CustomSettingWidget[] create(Setting setting, MyCustomSetting annotation, SettingInfo&lt;?&gt; info, SettingAccessor accessor) {\n            CustomSettingWidget customWidget = new CustomSettingWidget(\n                annotation.customText(), // Custom text defined in the annotation in the config\n                accessor.get() // Get the current value from the config\n            );\n\n            // When the user selects a custom value, pass it to the SettingAccessor to write it into the config\n            customWidget.setCustomUpdateListener(value -&gt; accessor.set(value));\n\n            // You can also return multiple widgets here that will be placed next to each other\n            return new CustomSettingWidget[]{customWidget};\n        }\n    }\n}\n</code></pre> <pre><code>CustomSetting {\n    // put in your custom stylesheet here\n}\n</code></pre> <pre><code>@ConfigName(\"myaddon\")\npublic class MyAddonConfig extends AddonConfig {\n\n    @MyCustomSetting\n    private final ConfigProperty&lt;String&gt; customValue = new ConfigProperty&lt;&gt;(\"first\");\n\n    public ConfigProperty&lt;String&gt; customValue() {\n        return this.customValue;\n    }\n}\n</code></pre>"},{"location":"pages/addon/features/events/","title":"Use and Create Events","text":"<p>With LabyMod 4 we not only deliver more Events, but they are also very similar to use, like the events of Minecraft server software like Bukkit and BungeeCord.</p>"},{"location":"pages/addon/features/events/#the-most-important-events","title":"The Most Important Events","text":"<p>We deliver a variety of events, but the following are the ones with the most common use cases:</p>"},{"location":"pages/addon/features/events/#addon-enable-event","title":"Addon Enable Event","text":"<p>The <code>AddonEnableEvent</code> is fired right after we detected your addon. This Event is only fired in your addon; you cannot use it to detect other addons. The event contains the Installed Addon Info, the reference storage of your addon and the main instance your addon was initialized with.</p>"},{"location":"pages/addon/features/events/#addon-post-enable-event","title":"Addon Post Enable Event","text":"<p>The exact moment when the <code>AddonPostEnableEvent</code> is fired depends on the current state of LabyMod. Suppose your addon is loaded directly after the game start (for example while in the addon develop environment or when the addon has been installed before). In that case, the Event will be fired as soon as LabyMod itself has been fully initialized. But if your addon is enabled while LabyMod is already initialized (when a user downloads your addon via the addon store), the Event will be fired right after we enabled it.</p>"},{"location":"pages/addon/features/events/#global-addon-post-enable-event","title":"Global Addon Post Enable Event","text":"<p>The <code>GlobalAddonPostEnableEvent</code> is called if an addon has been enabled. Same as <code>AddonPostEnableEvent</code>, the moment the event is fired depends on the current state of LabyMod. Can be used to detect if another addon has been enabled.</p>"},{"location":"pages/addon/features/events/#addon-unload-event","title":"Addon Unload Event","text":"<p>The class exists, but the Event won't be fired yet. It can be used to save custom configurations or close open connections to prevent a timeout.</p>"},{"location":"pages/addon/features/events/#chat-message-send-event","title":"Chat Message Send Event","text":"<p>The <code>ChatMessageSendEvent</code> is fired when sending a chat message to the server. It can be used to manipulate outgoing messages but also can be canceled. </p>"},{"location":"pages/addon/features/events/#chat-receive-event","title":"Chat Receive Event","text":"<p>The <code>ChatReceiveEvent</code> is fired when a message is registered to be shown in chat. It can be used to manipulate incoming messages. The Event is cancellable.</p>"},{"location":"pages/addon/features/events/#game-tick-event","title":"Game Tick Event","text":"<p>The <code>GameTickEvent</code> is fired twice every tick. Once with the phase <code>PRE</code> and once with the phase <code>POST</code>. The phase represents the current state of a tick. If it has the phase <code>PRE</code>, it is fired before Minecraft registers the tick to all its different handlers; if it's the <code>POST</code> phase, it is fired after Minecraft itself handled the tick. A tick represents 50 milliseconds (20 ticks per second).</p>"},{"location":"pages/addon/features/events/#json-config-loader-initialize-event","title":"Json Config Loader Initialize Event","text":"<p>The <code>JsonConfigLoaderInitializeEvent</code> is fired when the configuration loader is initialized. This Event is used to create your own type adapters for your configuration.</p>"},{"location":"pages/addon/features/events/#server-disconnect-event","title":"Server Disconnect Event","text":"<p>The <code>ServerDisconnectEvent</code> will be fired if the connection to a server closes (so either if the user disconnects or gets kicked).</p>"},{"location":"pages/addon/features/events/#server-join-event","title":"Server Join Event","text":"<p>The <code>ServerJoinEvent</code> will be fired as soon as the user connects to a server. Contains the ServerData.</p>"},{"location":"pages/addon/features/events/#sub-server-switch-event","title":"Sub Server Switch Event","text":"<p>The <code>SubServerSwitchEvent</code> is fired when the user is already connected to a server but switches to a sub-server (for example, when connected to a proxy and switching from the hub to survival games).</p>"},{"location":"pages/addon/features/events/#server-switch-event","title":"Server Switch Event","text":"<p>The <code>ServerSwitchEvent</code> will be fired when the user is on a server and then joins another server from the server list without disconnecting.</p>"},{"location":"pages/addon/features/events/#setting-initialize-event","title":"Setting Initialize Event","text":"<p>The <code>SettingInitializeEvent</code> is fired when an in-game setting was initialized; is used to modify setting Widgets at a later point (adding custom entries to a Dropdown for example).  The listener has to be registered before the setting category is added!</p>"},{"location":"pages/addon/features/events/#list-of-nearly-all-events","title":"List of (nearly) all Events","text":"Note <p>LabyMod 4 is constantly being developed and new events are added on a regular basis. This list is therefore not guaranteed to be complete.</p> Event Name Description Addon Lifecycle Events <code>AddonEnableEvent</code> Fired right after an addon is detected <code>AddonPostEnableEvent</code> Fired after LabyMod is fully initialized or right after an addon is enabled <code>GlobalAddonEnableEvent</code> Fired when any addon is enabled <code>GlobalAddonPostEnableEvent</code> Fired after any addon is fully enabled Block Entity Events <code>BlockEntityPreLoadEvent</code> Fired before a block entity is loaded <code>BlockEntityUpdateEvent</code> Fired when a block entity is updated <code>SignBlockEntityPostLoadEvent</code> Fired after a sign block entity is loaded Chat Events <code>ActionBarReceiveEvent</code> Fired when an action bar message is received <code>ChatClearEvent</code> Fired when the chat is cleared <code>ChatMessageAddEvent</code> Fired when a message is added to the chat <code>ChatMessageGuessSenderEvent</code> Fired when the sender of a chat message is being guessed <code>ChatMessageSendEvent</code> Fired when sending a chat message to the server. Allows modifying the message content, checking if it's a command, controlling whether it appears in chat history, or cancelling it entirely <code>ChatMessageUpdateEvent</code> Fired when a chat message is updated <code>ChatReceiveEvent</code> Fired when a message is received in chat. Allows accessing and modifying the message content or cancelling the message entirely <code>ChatScreenUpdateEvent</code> Fired when the chat screen is updated <code>AdvancedChatReloadEvent</code> Fired when advanced chat is reloaded <code>AdvancedChatTabMessageEvent</code> Fired when a message is added to an advanced chat tab Component Events <code>ComponentDeserializeEvent</code> Fired when a component is deserialized <code>ComponentSerializeEvent</code> Fired when a component is serialized <code>ComponentFlattenerConstructEvent</code> Fired when a component flattener is constructed Player Events <code>ClientHotbarSlotChangeEvent</code> Fired when the player changes their hotbar slot <code>ClientPlayerAbilitiesUpdateEvent</code> Fired when player abilities are updated <code>ClientPlayerInteractEvent</code> Fired when the player interacts with the world <code>DamageBlockedEvent</code> Fired when damage to a player is blocked <code>FieldOfViewModifierEvent</code> Fired when the field of view is modified <code>CameraLockEvent</code> Fired when the camera is locked <code>CameraUnlockEvent</code> Fired when the camera is unlocked <code>InventorySetSlotEvent</code> Fired when an inventory slot is set GUI Events <code>HudWidgetEvent</code> Fired for HUD widget-related actions <code>ActivityInitializeEvent</code> Fired when an activity is initialized <code>ActivityOpenEvent</code> Fired when an activity is opened <code>FileDroppedEvent</code> Fired when a file is dropped onto the game window <code>IngameMenuInitializeEvent</code> Fired when the in-game menu is initialized <code>ScreenDisplayEvent</code> Fired when a screen is displayed <code>ScreenOpenEvent</code> Fired when a screen is opened <code>ScreenResizeEvent</code> Fired when the screen is resized <code>ScreenUpdateVanillaWidgetEvent</code> Fired when a vanilla widget is updated <code>VanillaWidgetReplacementEvent</code> Fired when a vanilla widget is replaced <code>VersionedScreenInitEvent</code> Fired when a versioned screen is initialized <code>PlayerListUpdateEvent</code> Fired when the player list is updated <code>ServerBannerEvent</code> Fired when a server banner is displayed <code>ThemeChangeEvent</code> Fired when the theme is changed <code>ThemeLoadEvent</code> Fired when a theme is loaded <code>ThemeRegisterEvent</code> Fired when a theme is registered <code>ThemeUnregisterEvent</code> Fired when a theme is unregistered <code>ThemeUpdateEvent</code> Fired when a theme is updated <code>TitleScreenLogoInitializeEvent</code> Fired when the title screen logo is initialized <code>TitleScreenOpenedEvent</code> Fired when the main menu is fully opened, after the open sequence is finished and all parts of the menu are initialized. Can detect if this is the first time the title screen is opened during the application's lifecycle <code>TitleScreenRenderEvent</code> Fired when the title screen is rendered <code>TitleScreenSplashTextEvent</code> Fired when the title screen splash text is displayed <code>WindowResizeEvent</code> Fired when the game window is resized <code>WindowShowEvent</code> Fired when the game window is shown Input Events <code>CharacterTypedEvent</code> Fired when a character is typed <code>KeyEvent</code> Fired when a keyboard key is pressed or released. Provides information about which key was affected and the action (press, release, repeat). Can be cancelled to prevent the key input from being processed <code>RegisterKeybindingEvent</code> Fired when a keybinding is registered Lifecycle Events <code>GameFpsLimitEvent</code> Fired when the FPS limit is changed <code>GameShutdownEvent</code> Fired when the game is shutting down <code>GameTickEvent</code> Fired twice every game tick (PRE and POST phases). Useful for performing periodic tasks or animations that need to be synchronized with the game's update cycle Miscellaneous Events <code>CaptureScreenshotEvent</code> Fired when a screenshot is captured <code>VanillaOptionsSaveEvent</code> Fired when vanilla options are saved <code>WriteScreenshotEvent</code> Fired when a screenshot is written to disk Network Events <code>PlayerInfoAddEvent</code> Fired when player info is added <code>PlayerInfoRemoveEvent</code> Fired when player info is removed <code>NetworkDisconnectEvent</code> Fired when disconnecting from a network (deprecated) <code>NetworkServerSwitchEvent</code> Fired when switching servers within a network <code>NetworkSwitchEvent</code> Fired when switching networks <code>ServerDisconnectEvent</code> Fired when the connection to a server closes (disconnect, kick, or network interruption). Provides access to server data for cleanup operations <code>ServerJoinEvent</code> Fired when the client is ready to send packets to the server/network after joining <code>ServerSwitchEvent</code> Fired when switching between different server networks without fully disconnecting. Provides access to both old and new server data <code>SubServerSwitchEvent</code> Fired when switching between sub-servers within the same network (e.g., moving between game modes on a BungeeCord/Velocity network) Render Events <code>ConfigureMojangShaderEvent</code> Fired when Mojang shaders are configured <code>PlayerNameTagRenderEvent</code> Fired when a player name tag is rendered <code>RenderEvent</code> Fired during rendering <code>RenderTypeAttachmentEvent</code> Fired when a render type is attached <code>CameraRotationEvent</code> Fired when the camera rotates <code>EntityRenderEvent</code> Fired when an entity is rendered <code>EntityRenderPassEvent</code> Fired during an entity render pass <code>PlayerItemRenderContextEvent</code> Fired when rendering a player's item <code>HumanoidModelAnimateEvent</code> Fired when a humanoid model is animated <code>HudWidgetDropzoneElementShiftEvent</code> Fired when a HUD widget dropzone element is shifted <code>PostProcessingScreenEvent</code> Fired during post-processing of the screen <code>ShadowRenderPassContextEvent</code> Fired during shadow rendering <code>RenderBlockSelectionBoxEvent</code> Fired when rendering the block selection box <code>RenderWorldEvent</code> Fired when the world is rendered Resource Events <code>ReleaseTextureEvent</code> Fired when a texture is released <code>IncompatibleResourcePacksEvent</code> Fired when incompatible resource packs are detected <code>ResourceReloadEvent</code> Fired when resources are reloaded <code>RegisterResourceTransformerEvent</code> Fired when a resource transformer is registered Scoreboard Events <code>ScoreboardObjectiveUpdateEvent</code> Fired when a scoreboard objective is updated <code>ScoreboardScoreUpdateEvent</code> Fired when a scoreboard score is updated <code>ScoreboardTeamUpdateEvent</code> Fired when a scoreboard team is updated Session Events <code>SessionUpdateEvent</code> Fired when the session is updated World Events <code>DimensionChangeEvent</code> Fired when the dimension changes <code>EntityDestructEvent</code> Fired when an entity is destroyed <code>EntitySpawnEvent</code> Fired when an entity spawns <code>ItemStackTooltipEvent</code> Fired when an item stack tooltip is displayed <code>WorldLeaveEvent</code> Fired when leaving a world <code>BlockUpdateEvent</code> Fired when a block is updated <code>ChunkEvent</code> Fired for chunk-related actions <code>LightUpdateEvent</code> Fired when lighting is updated LabyMod Events <code>LabyModRefreshEvent</code> Fired when LabyMod is refreshed <code>ServiceLoadEvent</code> Fired when a service is loaded <code>SubscribeMethodRegisterEvent</code> Fired when a subscribe method is registered <code>ConfigurationLoadEvent</code> Fired when a configuration is loaded <code>ConfigurationSaveEvent</code> Fired when a configuration is saved <code>ConfigurationVersionUpdateEvent</code> Fired when a configuration version is updated <code>SettingInitializeEvent</code> Fired when a setting is initialized <code>SettingResetEvent</code> Fired when a setting is reset <code>SettingWidgetInitializeEvent</code> Fired when a setting widget is initialized <code>ImGuiInitializeEvent</code> Fired when ImGui is initialized <code>LabyConnectChatMessageDeleteEvent</code> Fired when a LabyConnect chat message is deleted <code>LabyConnectEvent</code> Fired for LabyConnect-related actions <code>LabyConnectChatDropdownInitializeEvent</code> Fired when a LabyConnect chat dropdown is initialized <code>LabyConnectChatInitializeEvent</code> Fired when LabyConnect chat is initialized"},{"location":"pages/addon/features/events/#create-your-very-own-events","title":"Create Your Very Own Events","text":""},{"location":"pages/addon/features/events/#create-a-basic-event","title":"Create a Basic Event","text":"<p>If you cannot find a suitable event for your needs, you can simply create your own event. You can create a basic event by creating a new class and implementing the <code>Event</code> interface.</p> <p>Events are particularly useful when working with version-dependent code. For example, if you want to play a sound every time a player receives an advancement, you can use a custom event so you don't have to implement the logic for each version.</p>"},{"location":"pages/addon/features/events/#fire-a-custom-event","title":"Fire a Custom Event","text":"<p>To fire/call a custom event, you only need to execute the <code>Laby.fireEvent</code> method, which returns the executed event.</p>"},{"location":"pages/addon/features/events/#code-example-of-the-previous-section","title":"Code Example of the Previous Section","text":"<p>We first create a new class in our <code>core</code>- or <code>api</code> module called <code>AdvancementReceiveEvent</code> and implement the <code>Event</code> interface from the <code>net.labymod.api.event</code> package. For this example, we only need a simple class that does not contain any fields. However, you can also add fields that can be changed in your event listener.</p>  AdvancementReceiveEvent <pre><code>import net.labymod.api.event.Event;\n\npublic class AdvancementReceiveEvent implements Event {\n\n  public AdvancementReceiveEvent() {\n  }\n\n}\n</code></pre> <p>Now we need to fire the event so that all registered listeners can be notified. We will do this by hooking into the Minecraft code for each version and calling <code>Laby.fireEvent(new AdvancementReceiveEvent())</code> every time the player receives a new advancement.</p> <p>You can find more information about how to hook into Minecraft methods here.</p> <p>The last thing to do is to create our listener class called <code>AdvancementReceivedListener</code> which will listen for our <code>AdvancementReceiveEvent</code> and play a sound for the client every time the event is fired. The <code>AdvancementReceivedListener</code> needs a method annotated with <code>@Subscribe</code> and our <code>AdvancementReceiveEvent</code> class as parameters. In this method, we can simply call <code>Laby.labyAPI().minecraft().sounds().playButtonPress()</code> to play a sound for the client every time our event is fired.</p>  AdvancementReceivedListener <pre><code>import net.labymod.api.Laby;\nimport net.labymod.api.event.Subscribe;\n\npublic class AdvancementReceivedListener {\n\n  @Subscribe\n  public void onAdvancementReceived(AdvancementReceivedEvent event) {\n    Laby.labyAPI().minecraft().sounds().playButtonPress();\n  }\n\n}\n</code></pre> <p>Finally, we need to register our <code>AdvancementReceivedListener</code> class in the <code>enable()</code> method of our main addon class by calling <code>registerListener(new AdvancementReceivedListener())</code>.</p>"},{"location":"pages/addon/features/hud-widgets/","title":"Create Hud Widgets","text":"<p>A Hud Widget is a block of content, which can be enabled within our \"Widget Editor\". Users can customize and move Widgets by drag&amp;drop. Our Hud Widget System allows you to create own Widgets for your addon.</p>"},{"location":"pages/addon/features/hud-widgets/#create-own-hud-widget-category","title":"Create own Hud Widget Category","text":"<p>You're able to create own Widget categories so you can create an own category for the Widgets your addon provides. Just create a HudWidgetCategory and register it in your Addon enable method.</p> <pre><code>@AddonMain\npublic class ExampleAddon extends LabyAddon&lt;ExampleConfiguration&gt; {\n\n  private HudWidgetCategory widgetCategory;\n\n  @Override\n  protected void enable() {\n    labyAPI().hudWidgetRegistry().categoryRegistry().register(this.widgetCategory = new HudWidgetCategory(\"example_category\"));\n  }\n\n{\n</code></pre>"},{"location":"pages/addon/features/hud-widgets/#registering-hudwidgets","title":"Registering HudWidgets","text":"<p>You can register a created Hud Widget in your Addon enable method.</p> <pre><code>@AddonMain\npublic class ExampleAddon extends LabyAddon&lt;ExampleConfiguration&gt; {\n\n  @Override\n  protected void enable() {\n    labyAPI().hudWidgetRegistry().register(new ExampleHudWidget(this));\n  }\n\n{\n</code></pre>"},{"location":"pages/addon/features/hud-widgets/#different-hudwidget-types","title":"Different HudWidget Types","text":"<p>LabyMod provides different Widget types that help you to easily create HudWidgets.</p> <ul> <li>TextHudWidget - a simple text widget that supports multiple lines</li> <li>ItemHudWidget - an item widget with that you can display an image with a text next to it</li> <li>SimpleHudWidget - a widget that render custom icons/text etc. - an example can be found in the Teamspeak LabyMod Addon</li> </ul>"},{"location":"pages/addon/features/hud-widgets/#example-texthudwidget","title":"Example TextHudWidget","text":"<pre><code>public class ExampleHudWidget extends TextHudWidget&lt;TextHudWidgetConfig&gt; {\n\n  private TextLine textLine;\n\n  public ExampleHudWidget(ExampleAddon addon) {\n    super(\"example_id\");\n    // Bind the Widget to our created category in our main class\n    this.bindCategory(addon.widgetCategory());\n\n    // Optional - set an icon for the Widget Editor in the Constructor; you can also annotate the icon via a SpriteSlot at the top of the class\n    this.setIcon(ResourceLocation.create(\"minecraft\", \"textures/item/name_tag.png\"));\n  }\n\n  @Override\n  public void load(TextHudWidgetConfig config) {\n    super.load(config);\n    this.textLine = createLine(\"Own Username\", \"\");\n  }\n\n  @Override\n  public void onTick(boolean isEditorContext) {\n\n    String value = null;\n    if(Laby.labyAPI().serverController().isConnected()) {\n      value = Laby.labyAPI().getName();\n    }\n\n    // Update the text line an flush it\n    this.textLine.updateAndFlush(value);\n\n    // Set the state of the text line\n    // DISABLED - text line is fully disabled also not available in the Widget Editor\n    // HIDDEN - text line is hidden ingame, but is displayed in the Widget Editor\n    // VISIBLE - text line is visible ingame\n    this.textLine.setState(value != null ? State.VISIBLE : State.HIDDEN);\n  }\n\n}\n</code></pre>"},{"location":"pages/addon/features/hud-widgets/#hud-widget-configurations","title":"Hud Widget Configurations","text":"<p>You can also create Configurations for your Hud Widgets, in our example we are using a configuration for the TextHudWidget. You can easily create configurations by creating a class that inherit the <code>TextHudWidgetConfig</code> class. You can use the same Setting Elements that you are using to create the configuration of your addon, take a look here.</p> <pre><code>public class ExampleHudWidget extends TextHudWidget&lt;ExampleHudWidgetConfig&gt; {\n\n  private TextLine textLine;\n\n  public ExampleHudWidget(ExampleAddon addon) {\n    super(\"example_id\", ExampleHudWidgetConfig.class);\n    this.bindCategory(addon.widgetCategory());\n  }\n\n  @Override\n  public void load(ExampleHudWidgetConfig config) {\n    super.load(config);\n    this.textLine = createLine(\"Own UUID\", \"\");\n  }\n\n  @Override\n  public void onTick(boolean isEditorContext) {\n\n    String value = null;\n    if(Laby.labyAPI().serverController().isConnected()) {\n      value = Laby.labyAPI().getUniqueId().toString();\n      // Access our created Setting\n      if(!this.getConfig().showDashes().get()) {\n        value = value.replace(\"-\", \"\");\n      }\n    }\n\n    this.textLine.updateAndFlush(value);\n    this.textLine.setState(value != null ? State.VISIBLE : State.HIDDEN);\n  }\n\n  public static class ExampleHudWidgetConfig extends TextHudWidgetConfig {\n\n    @SwitchSetting\n    private final ConfigProperty&lt;Boolean&gt; showDashes = new ConfigProperty&lt;&gt;(true);\n\n    public ConfigProperty&lt;Boolean&gt; showDashes() {\n      return showDashes;\n    }\n\n  }\n\n}\n</code></pre>"},{"location":"pages/addon/features/internationalization/","title":"Internationalize your Addon","text":"<p>All internationalization files have to be located in the module called <code>core</code> and then down the folder structure <code>src/main/resources/assets/NAMESPACE/i18n/</code> (\"NAMESPACE\" should be replaced with the namespace you set in your <code>build.gradle.kts</code>). The default file for internationalization is called <code>en_us.json</code>, as English is the default language. </p>"},{"location":"pages/addon/features/internationalization/#create-custom-translations","title":"Create Custom Translations","text":"<p>You can do more than internationalize your settings. You also have the option to internationalize every other text that the user sees. Any time a <code>Component</code> is used, you have the option to just set a raw String via <code>Component.text</code>. Still, you also have the option to use your custom translations by using <code>Component.translatable</code>. Do you have arguments that need to be replaced? Not a problem! We replace arguments that are indicated with <code>%s</code> on every translation. </p> <p>So, for example instead of using a non-translated String like <code>\"The Addon has a rating of \" + rating + \" Stars!\"</code>, you could put a String like <code>\"The Addon has a rating of %s Stars!\"</code> in your internationalization file and create the Component with <code>Component.translatable(\"example.commands.info.rating\", rating)</code> and the output would be the same. The only difference is that your Addon can be used in many different languages without hard-coding every String.</p> <p>There are two possibilities to get the translated String if you don't want to use Components. If you want a String that cannot be null, you call <code>I18n.translate</code> with the translation key and the arguments.  The method will return the key if the translation key cannot be found in any internationalization file. Now, if you want to check if the translation key can be found easily, you call <code>I18n.getTranslation</code> with the translation key and possibly arguments.  The method will return <code>null</code> if the key cannot be found.</p> <p>As already mentioned, you can internationalize every text the user can see, even the widgets of our Activity system that display text. A list of all widgets delivered with our Addon API can be found here. </p>"},{"location":"pages/addon/features/internationalization/#support-multiple-languages","title":"Support Multiple Languages","text":"<p>The language in LabyMod and thus the preferred internationalization file of every Addon will change when switching the language in Minecraft itself. The fallback language always stays <code>en_us</code>. That means if, for example, a user selected German as the language in which Minecraft is displayed, we will search for a file called <code>de_de.json</code> in your Addon. If that file isn't found, we will use the default file and thus the English translations.</p> <p>All official supported languages can be found in  this Minecraft Fandom Wiki article. The relevant part of this chart is the In-game Locale Code. Your file has to have the same locale code. Otherwise, we can't identify your file as a match to the intended language.</p>"},{"location":"pages/addon/features/version-dependent/","title":"Write Version Dependent Code","text":"<p>While our API is entirely version-independent for you to use, you might still need to implement some version-dependent things yourself (such as niche things, just something we didn't implement). At the current moment, you might need to implement more yourself, as we're still implementing more and more stuff for you to use version independently.</p> <p>There are two ways to implement version-dependent; different use cases require different ways to implement them.</p> <p>The easiest method is to create an interface or abstract class and implement it in your desired version(s). This will result in the ability that you can control your version-dependent code from the core.</p> <p>The more complex way would be SpongePowered's Mixin. While Mixin is comparatively easy to use, it can be a bit confusing at the beginning, as all new things are.</p> Important Note <p>Please keep in mind that the examples on this page are version dependent. We are showing the examples for Minecraft 1.19.1, so depending on the date you're reading this, recreating the examples might not be possible, we'll try to keep them updated, though, and if we do, we update the version in this note.</p>"},{"location":"pages/addon/features/version-dependent/#access-the-minecraft-code-the-normal-way","title":"Access the Minecraft Code \"the Normal Way\"","text":"<p>You should only use this method for things you can access without using Reflections, as using Reflections can have a high impact on the performance of the players that use your addon.</p> <p>The use case we will implement in the following example will show how to display messages in the player's chat. We have already implemented this, but it is relatively easy to show and understand.</p> <p>We will first create a new interface in our <code>core</code>- or <code>api</code> module called <code>ExampleChatExecutor</code>, annotate it with the <code>@Referenceable</code> annotation and declare a new method <code>void displayMessageInChat(String)</code>. Now we head to the module of the version we want and create a new class called <code>VersionedExampleChatExecutor</code> in our desired package. If there is no folder called <code>src</code> in the module, you'll need to create the following folder structure inside the module: <code>src/main/java/</code>.</p> <p>Now to the implementation. First, we implement the interface <code>ExampleChatExecutor</code>, and now the most important part: we need to add the annotation <code>Implement</code> to the class and declare <code>ExampleChatExecutor.class</code> as the argument. This will allow you to access the versioned implementation from the core module. Then we'll add the annotation <code>Singleton</code> to the class, as we don't need more than one object of this implementation. At this point, the only missing point is the actual implementation of Minecraft; we'll overwrite the <code>displayMessageInChat</code> method from our interface and create a new Component from our String with <code>Component.literal(message)</code>. Then we access the Chat GUI with <code>Minecraft.getInstance().gui.getChat()</code> and add our component with <code>addMessage(component)</code>.</p> <p>To access our <code>VersionedExampleChatExecutor</code> from the core module, we need to add a private instance of the <code>ExampleChatExecutor</code> with a getter to our <code>ExampleAddon</code> class. Then we assign the instance in our <code>ExampleAddon#enable</code> method using <code>((DefaultReferenceStorage) this.referenceStorageAccessor).exampleChatExecutor()</code>. If the function does not exist, we need to run a gradle build to add the class to our reference storage. We can now access the instance from the core module with <code>ExampleAddon#chatExecutor()</code>. Now we can require an <code>ExampleAddon</code> instance as a parameter in our <code>ExamplePingCommand</code> and pass <code>this</code> to the constructor of the command in the <code>ExampleAddon#enable</code>. Then we can access the <code>VersionedExampleChatExecutor</code> instance from the command and call the <code>displayMessageInChat</code> method with <code>\"Pong!\"</code> as an argument.</p> <p>After starting LabyMod 4, joining a server, and executing \"/pong\", we'll see a colorless \"Pong!\". Now, if we want that message colored, we need to replace <code>String</code> in our interface with <code>Component</code>. Instead of using <code>Command.literal</code>, we get the <code>ComponentMapper</code> via <code>Laby.labyApi().minecraft().componentMapper()</code> and call <code>toMinecraftComponent(component)</code>. Now our component from the Adventure Component library was mapped to a Minecraft Component, and calling <code>displayMessageInChat(Component.text(\"Pong!\", NamedTextColor.GOLD))</code> in our Command works like before. Just with our own implementation.</p> <p>Those are the results from this example:</p>  ExampleChatExecutor VersionedExampleChatExecutor ExampleAddon ExamplePingCommand <pre><code>@Referenceable\npublic interface ExampleChatExecutor {\n\n  void displayMessageInChat(String message);\n\n  void displayMessageInChat(Component adventureComponent);\n}\n</code></pre> <pre><code>@Singleton\n@Implements(ExampleChatExecutor.class)\npublic class VersionedExampleChatExecutor implements ExampleChatExecutor {\n\n  @Override\n  public void displayMessageInChat(String message) {\n    Component component = Component.literal(message);\n    this.addMessageToChat(component);\n  }\n\n  @Override\n  public void displayMessageInChat(net.kyori.adventure.text.Component adventureComponent) {\n    ComponentMapper componentMapper = Laby.labyAPI().minecraft().componentMapper();\n    Component component = (Component) componentMapper.toMinecraftComponent(adventureComponent);\n    Minecraft.getInstance().gui.getChat().addMessage(component);\n  }\n\n  private void addMessageToChat(Component component) {\n    Minecraft.getInstance().gui.getChat().addMessage(component);\n  }\n}\n</code></pre> <pre><code>public class ExampleAddon extends LabyAddon&lt;ExampleConfiguration&gt; {\n\n  private ExampleChatExecutor chatExecutor;\n\n  @Override\n  protected void enable() {\n    chatExecutor = ((DefaultReferenceStorage) this.referenceStorageAccessor()).exampleChatExecutor();\n\n    this.registerCommand(new ExamplePingCommand(this));\n  }\n\n  @Override\n  protected Class&lt;? extends ExampleConfiguration&gt; configurationClass() {\n    return ExampleConfiguration.class;\n  }\n\n  public ExampleChatExecutor chatExecutor() {\n    return chatExecutor;\n  }\n</code></pre> <pre><code>public class ExamplePingCommand extends Command {\n\n  private final ExampleChatExecutor chatExecutor;\n\n  public ExamplePingCommand(ExampleAddon addon) {\n    super(\"ping\", \"pong\");\n    chatExecutor = addon.chatExecutor();\n  }\n\n  @Override\n  public boolean execute(String prefix, String[] arguments) {\n    if (prefix.equalsIgnoreCase(\"ping\")) {\n      this.displayMessage(Component.text(\"Ping!\", NamedTextColor.AQUA));\n      return false;\n    }\n\n    chatExecutor.displayMessageInChat(Component.text(\"Pong!\", NamedTextColor.GOLD));\n    return true;\n  }\n}\n</code></pre>"},{"location":"pages/addon/features/version-dependent/#access-the-minecraft-code-via-mixin","title":"Access the Minecraft Code via Mixin","text":"Important Note <p>Please keep in mind that the moment your addon uses Mixins, it requires a restart when downloaded via the addon store.</p> <p>todo: write</p>"},{"location":"pages/addon/features/version-dependent/#inheriting-version-dependent-code","title":"Inheriting Version Dependent Code","text":"<p>todo: write</p>"},{"location":"pages/addon/publishing/guidelines/","title":"Guidelines","text":"Important Note <p>If you need to \"break\" one (or more) of the following guidelines, you are required to explain this in form of  JavaDocs at this location of your source. This allows us to decide if we deem it necessary or not.</p> <p>Before you can submit an addon to our addon store, make sure you are following these guidelines:</p> <ol> <li>Addons cannot impact the game experience negatively, this includes performance.<ol> <li>Don't create objects every tick or frame if you can cache them.</li> <li>Do not use <code>java.util.stream.Stream</code>.</li> <li>Do not consume commands without providing a response.</li> </ol> </li> <li>Respect the privacy of your users.<ol> <li>Do not use the player's session identifier maliciously.</li> <li>If creating a connection to a private server, do not store or send any information that is not specifically    required.</li> </ol> </li> <li>Only access the users' file system if necessary.</li> <li>Allow the user &amp; servers to completely disable your addon at any time (    see Create a Basic    Configuration).</li> <li>Make sure your addon is compatible and remains so for the foreseeable future.<ol> <li>Do not use deprecated methods and/or classes that already have a replacement.</li> <li>Do not use Reflection in any way. If you want to get access to a field or method that is private or protected,    use mixin or an accesswidener.</li> <li>Do not try to modify the LabyMod source in any way. If you are missing a sub-feature of one of our official    features, suggest it here.</li> <li>If you're injecting code via mixin, don't overdo it. Replacing a method in its entirety can cause    incompatibilities.</li> <li>Do not access LabyMod core packages, as using them may break your addon at any time. If you need access to    LabyMod internal methods, let us know on our development    Discord.</li> <li>Do not use legacy color codes</li> </ol> </li> <li>You need to use our Internationalization    system for every text the user sees.<ol> <li>Excluded from this are strings that are the same for every language (like for example the prefix of commands).</li> <li>You are allowed to write f.e. German strings in the <code>en_us.json</code>, if there is no reason for international players    to use your addon. For example a server addon for a server that is region locked or has no international players.    This has to be clarified in the addon description.</li> </ol> </li> </ol>"},{"location":"pages/addon/publishing/publish/","title":"Publish Your Addon","text":"<p>On this page, we're explaining what exactly you have to do to publish your addon.  Before publishing, please make sure that you're following our Addon Store Guidelines.</p>"},{"location":"pages/addon/publishing/publish/#upload-to-github-or-gitlab","title":"Upload to GitHub or GitLab","text":"<p>In order to publish your addon, you have to provide us with your source code and an artifact (either built by GitHub Actions or GitLab CI/CD).  While it is only necessary to publicly share your addon until we reviewed it, it is always welcome to see the source code of addons being publicly available at all times.  </p> <p>If you want to upload your addon to your own GitLab instance, write an email to info@labymod.net.</p>"},{"location":"pages/addon/publishing/publish/#publish","title":"Publish","text":"<p>We use FlintMC as the back end (and web view) for our addon store. There may be some bugs because it's in early development, so create a bug report on our Idea platform if you find any.</p>"},{"location":"pages/addon/publishing/publish/#version-compatibility","title":"Version Compatibility","text":"<p>We're using version ranges to verify the compatibility of an addon with LabyMod 4 and the Minecraft version the user is playing with. </p>"},{"location":"pages/addon/publishing/publish/#the-star","title":"The Star","text":"<p>The version <code>*</code> indicates compatibility with all versions (even unreleased ones). Don't use the star unless you're only using version-independent things from the official LabyMod 4 Addon API.</p>"},{"location":"pages/addon/publishing/publish/#single-version","title":"Single Version","text":"<p>Version <code>1.8.9</code> indicates compatibility with just Minecraft 1.8.9 and thus no other Minecraft version except Minecraft 1.8.9 will be supported. </p>"},{"location":"pages/addon/publishing/publish/#version-range","title":"Version Range","text":"<p>A version range is a range of versions supported. Contains The Star and Single Version.  A few examples: </p> <ul> <li><code>1.17&lt;1.19.2</code> - every version between 1.17.0 and 1.19.2 is supported - Everything below 1.17.0 (for example 1.16.5) or higher than 1.19.2 (for example 1.19.3) isn't.</li> <li><code>1.18.2&lt;*</code> - every version after (and including) Minecraft 1.18.2 is supported. Every version below 1.18.2 isn't supported.</li> </ul>"},{"location":"pages/addon/publishing/publish/#multi-version-range","title":"Multi Version Range","text":"<p>A multi-version range is a combination of Version Ranges and Single Versions. This is mostly used to guarantee a good experience when supporting multiple versions that have one or more major releases in between. Example:  <code>1.8.9,1.12.2,1.16.5&lt;1.19.2</code> - this supports Minecraft 1.8.9, 1.12.2 and everything in between (and including) 1.16.5 and 1.19.2. Minecraft 1.19-1.12.1, 1.13-1.16.4 and everything higher than (and including) 1.19.3 would not be supported.</p>"},{"location":"pages/addon/setup/first-steps/","title":"First Steps","text":"<p>First you'll need a Java IDE, as of now we only support IntelliJ IDEA. Then download JDK (Java Development Kit) 21 if you haven't already.</p> <p>Differences between the \"Community\" and \"Ultimate\" edition:</p> <ul> <li>IntelliJ IDEA Community Edition is the free to use version for everyone.</li> <li>IntelliJ IDEA Ultimate is the version where you need a valid subscription based license.</li> </ul> <p>You can apply for a free educational license at Jetbrains here. Its also possible obtain an \"Ultimate\" edition license if you are part of the GitHub Global Campus where you can apply here.</p> <p>Now  download or clone our addon template and open it in your preferred IDE.</p> <p>todo: fill with basic information</p>"},{"location":"pages/addon/setup/setup/","title":"Your First LabyMod 4 Addon","text":"<p>All you need to do to start your Addon is done. You should be able to start your Addon with LabyMod 4 right after you've imported the Gradle project, but there are a few things left that you shouldn't forget.</p> <p>To name a few of them:</p> <ul> <li>Basic Information: not only those who will test your Addon would benefit from providing some information, but we do too. Some information is crucial to guarantee a seamless experience</li> <li>Understanding the Example: you could start with coding stuff for your Addon, but we've written an example addon to show you the basics of how LabyMod 4 addons work.</li> </ul>"},{"location":"pages/addon/setup/setup/#provide-information-about-your-addon","title":"Provide information about your Addon","text":"<p>Head inside the <code>build.gradle.kts</code> and search for the block called <code>labyMod</code>.  Inside this block is an assignment to the field <code>defaultPackageName</code>, change the assigned value to the main package you're using in all modules (for example <code>net.labymod.addons.voicechat</code>). This allows us to generate important files to the right package.  Now search for the <code>addonInfo</code> segment and edit the following fields:</p> <ul> <li><code>namespace</code>: this attribute has to be unique for everything to work without complications. If you want to publish your Addon, we will check if this namespace is already taken by any other published addon, so nothing to worry about </li> <li><code>displayName</code>: the display name users will see when they view their installed addons</li> <li><code>author</code>: the name of your organization or you</li> <li><code>description</code>: a description that fits your Addon</li> <li><code>minecraftVersion</code>: the version compatibility of the addon</li> </ul> <p>After you have changed these attributes, reload the Gradle project, and you're good to go.</p>"},{"location":"pages/addon/setup/setup/#understanding-the-basics","title":"Understanding the Basics","text":"<p>Head to <code>core/src/main/java</code> in your root project folder. You'll find some examples, starting with the main addon class: <code>ExampleAddon</code>.</p>"},{"location":"pages/addon/setup/setup/#the-main-class","title":"The Main Class","text":"<p>The most important thing about the main addon class is the <code>AddonMain</code> annotation. This annotation allows us to automatically generate the <code>addon.json</code>, basically the identifier of your Addon. That means without this file, LabyMod can't recognize your Addon, and thus it won't start.</p> <p>Now there are two ways to use this main class:</p> <ul> <li>With a Superclass that handles the necessary stuff for you (this is what we used in the example)</li> <li>Without anything in the background. Just a bare class, you have to handle almost everything yourself (logic-wise)</li> </ul>"},{"location":"pages/addon/setup/setup/#the-main-with-the-superclass","title":"The Main with the Superclass","text":"<p>We've written a Superclass for an easier and more convenient way to develop addons. By inheriting the class <code>LabyAddon</code>, everything is more straightforward. All you have to do is specify your configuration class (in our example, the class <code>ExampleConfiguration</code>, but more about that later) in 3 different places (the parts you need to replace are written in CAPS):</p> <ol> <li>after declaring your main class by appending <code>extends LabyAddon&lt;CONFIGURATION&gt;</code>. After doing that, your IDE should either mark the other two places as errors or replace them automatically, but we'll show you anyhow</li> <li>in the head of the getter <code>configurationClass</code> by changing it to <code>Class&lt;CONFIGURATION&gt;</code></li> <li>in the body of the same getter <code>configuraionClass</code> by changing the returned value to <code>CONFIGURATION.class</code></li> </ol> <p>Looking at the method <code>enable</code>, you'll see we used a method called <code>registerSettingCategory</code>. This method registers a new category in the LabyMod Settings, allowing users to enable/disable or configure other things regarding your Addon.</p> <p>Registering commands and listeners can be done by calling <code>registerListener</code> and <code>registerCommand</code> and providing the already initialized object.</p> <p>Now the final method we called here is <code>this.logger()</code>, a logger to print information to the console/log. This is nicer than <code>System.out.println()</code> because it is integrated with the Minecraft log. You can print information with <code>.info()</code>, warnings with <code>.warn()</code> or errors with <code>.error()</code>.</p>"},{"location":"pages/addon/setup/setup/#the-main-without-the-superclass","title":"The Main without the Superclass","text":"<p>As already mentioned, you can inherit the class <code>LabyAddon</code>, but you can also do it without it. </p> Important Note <p>While this is possible, we highly recommend creating Addons with our LabyAddon class as it implements some things that make creating addons easier, especially for beginners. </p> <p>This section stays empty for now, it would take too long to describe it, and we have an easier way.</p>"},{"location":"pages/addon/setup/setup/#the-configuration","title":"The Configuration","text":"<p>Now navigate to the class <code>ExampleConfiguration</code>. You'll see that this class inherits <code>AddonConfig</code>. This is necessary for the main configuration, as it requires you to inherit the <code>enabled</code> ConfigProperty.</p> <p>Looking at the class body, you will find a field called <code>enabled</code> with the <code>SwitchSetting</code> annotation.  The annotation declares the Widget that you'll find in your settings. In this case, the Widget is a SwitchSettingWidget, which toggles a boolean between on and off.</p> <p>You can find more about configurations here.</p>"},{"location":"pages/addon/setup/setup/#the-listener","title":"The Listener","text":"<p>Looking into the package <code>org.example.core.listener</code>, you'll find the class ExampleGameTickListener; it does what it says. It listens to the GameTickListener event. You can find a complete guide to our events  here.</p> <p>First, we declared a field with our addon main class as type. Then we created a constructor with our main class instance as a parameter.</p> <p>Basically, what this class does is, as already mentioned, listen to the GameTickEvent, which is called twice every tick (first one with phase PRE &amp; the second one with phase POST). In this case, we only listen to the PRE phase because we only want the rest called once. Inside the event, we access the field with our addon main instance; with this instance, we are gaining access to the logger we mentioned a few sections above and printing if the Addon is enabled or disabled.</p>"},{"location":"pages/addon/setup/setup/#the-command","title":"The Command","text":"<p>With the LabyMod 4 API, you can add your own commands with a simple-to-use command system. More on how to create own commands here.</p> <p>What we do in this class is as simple and basic as the command system in general. We are inheriting the class <code>Command</code>, creating the constructor of our class, and calling the constructor of the superclass with the main prefix of the command (in our case, <code>ping</code>) and the aliases (in this case, just <code>pong</code>).</p> <p>Now to the <code>execute</code> method. It is called when, as the name says, the command is executed, and we can handle it.</p> <p>FINISH AFTER THE COMMAND SYSTEM IS FINISHED</p>"},{"location":"pages/addon/setup/setup/#the-internationalization-file","title":"The Internationalization File","text":"<p>Go to the module called <code>core</code> and then navigate down to <code>src/main/resources/assets/example/i18n/</code> (the <code>example</code> folder has to be named after the namespace you set in your <code>build.gradle.kts</code>) and you should see a file with the name <code>en_us.json</code>. This is the default file for internationalization, as English is the default language. To dive deeper in the internationalization of LabyMod go to this article.</p> <p>First, we created a new JSON Object called <code>settings</code>, which implies that the following lines are for the settings; after that, we created another Json Object called <code>example</code>, this has to reflect the namespace that you set in your <code>build.gradle.kts</code>. In said Json Object we declared a String with the key <code>name</code>; this ends up being the name of the Addon, which you'll see on the category button linking to the settings of your Addon in the LabyMod Settings. Now we created another JSON Object with the key <code>enabled</code>, as this is the name of the field in our configuration; you will find another String with the key <code>name</code>. This is the name of the Setting Widget <code>enabled</code>.</p>"},{"location":"pages/server/","title":"Server API Setup","text":"Important Note <p>You'll need Java Development Kit (JDK) 8 or higher to be able to use the LabyMod 4 Server API (the Velocity platform-specific implementation requires JDK 17 or higher)</p>"},{"location":"pages/server/#adding-the-labymod-repository","title":"Adding the LabyMod Repository","text":"Gradle (Kotlin DSL) Gradle (Groovy) Maven <pre><code>repositories {\n    maven {\n        name = \"labymod\"\n        url = uri(\"https://dist.labymod.net/api/v1/maven/release/\")\n    }\n}\n</code></pre> <pre><code>repositories {\n    maven {\n        name = \"labymod\"\n        url = \"https://dist.labymod.net/api/v1/maven/release/\"\n    }\n}\n</code></pre> <pre><code>&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;labymod&lt;/id&gt;\n        &lt;url&gt;https://dist.labymod.net/api/v1/maven/release/&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;\n</code></pre>"},{"location":"pages/server/#adding-the-labymod-4-server-api-as-a-dependency","title":"Adding the LabyMod 4 Server API as a Dependency","text":"<p>Depending on the actual artifact you want to use, you have to add the following dependency to your project. Listed below are the available artifacts and their use cases:</p> <ul> <li><code>api</code> - The protocol itself without any LabyMod-specific code. Useful if you want to just use the protocol.</li> <li><code>core</code> - The LabyMod implementation of the protocol, containing all packets and models to interact with the LabyMod client. Use this if you want to communicate with the LabyMod 4 Server API platform-independently.</li> <li><code>server-bukkit</code> - The platform-specific implementation of the LabyMod Protocol for Servers running on Bukkit (Spigot, Paper, etc.).</li> <li><code>server-bungeecord</code> - The platform-specific implementation of the LabyMod Protocol for Servers running on BungeeCord.</li> <li><code>server-minestom</code> - The platform-specific implementation of the LabyMod Protocol for Servers running on Minestom.</li> <li><code>server-velocity</code> - The platform-specific implementation of the LabyMod Protocol for Servers running on Velocity.</li> <li><code>server-common</code> - Contains shared classes and utilities used across different server implementations to ensure consistent behavior and reduce code duplication. Use this if you want to create your own platform implementation.</li> </ul> Important Note <p>For the examples below, replace <code>ARTIFACT</code> and <code>VERSION</code> with the artifact and version you want to use. The latest version can be found here: </p>  Gradle (Kotlin DSL) Gradle (Groovy) Maven <pre><code>dependencies {\n    compileOnly(\"net.labymod.serverapi:ARTIFACT:VERSION\")\n}\n</code></pre> <pre><code>dependencies {\n    compileOnly \"net.labymod.serverapi:ARTIFACT:VERSION\"\n}\n</code></pre> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;net.labymod.serverapi&lt;/groupId&gt;\n    &lt;artifactId&gt;ARTIFACT&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"pages/server/#setting-up-your-plugin","title":"Setting up Your Plugin","text":"<p>Each officially supported server platform has two types of implementations. </p> <ol> <li>You load the official jar file into your server's plugins folder and add it as a plugin dependency to your plugin.</li> <li>You shade the dependency into your plugin and initialize it manually, effectively eliminating the need to have the  Server API run as a separate plugin.</li> </ol>"},{"location":"pages/server/#bukkit-plugin","title":"Bukkit Plugin","text":""},{"location":"pages/server/#running-the-server-api-as-a-plugin","title":"Running the Server API as a Plugin","text":"<ol> <li>Add the <code>server-bukkit</code> dependency to your project's dependencies as described above.</li> <li>Download the latest version of the <code>server-bukkit</code> jar file from the GitHub Releases.</li> <li>Place the jar file in your server's <code>plugins</code> folder.</li> <li>Add the following line to your plugin's <code>plugin.yml</code>:     <pre><code>depend: [LabyModServerAPI]\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your Bukkit plugin.</li> </ol>"},{"location":"pages/server/#shading-the-server-api-into-your-plugin","title":"Shading the Server API into Your Plugin","text":"<ol> <li>Add the <code>server-bukkit</code> dependency to your project's dependencies as described above.</li> <li>Configure shadow in your project's <code>build.gradle</code> or <code>pom.xml</code> to shade the <code>server-bukkit</code> dependency into your plugin.</li> <li>Initialize the LabyMod 4 Server API in your plugin's <code>onEnable</code> method:     <pre><code>@Override\npublic void onEnable() {\n    LabyModProtocolService.initialize(this);\n}\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your Bukkit plugin.</li> </ol>"},{"location":"pages/server/#bungeecord-plugin","title":"BungeeCord Plugin","text":""},{"location":"pages/server/#running-the-server-api-as-a-plugin_1","title":"Running the Server API as a Plugin","text":"<ol> <li>Add the <code>server-bungeecord</code> dependency to your project's dependencies as described above.</li> <li>Download the latest version of the <code>server-bungeecord</code> jar file from the GitHub Releases.</li> <li>Place the jar file in your server's <code>plugins</code> folder.</li> <li>Add the following line to your plugin's <code>plugin.yml</code> or <code>bungee.yml</code>:     <pre><code>depend: [LabyModServerAPI]\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your BungeeCord plugin.</li> </ol>"},{"location":"pages/server/#shading-the-server-api-into-your-plugin_1","title":"Shading the Server API into Your Plugin","text":"<ol> <li>Add the <code>server-bungeecord</code> dependency to your project's dependencies as described above.</li> <li>Configure shadow in your project's <code>build.gradle</code> or <code>pom.xml</code> to shade the <code>server-bungeecord</code> dependency into your plugin.</li> <li>Initialize the LabyMod 4 Server API in your plugin's <code>onEnable</code> method:     <pre><code>@Override\npublic void onEnable() {\n    LabyModProtocolService.initialize(this);\n}\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your BungeeCord plugin.</li> </ol>"},{"location":"pages/server/#minestom-library","title":"Minestom Library","text":"<ol> <li>Add the <code>server-minestom</code> dependency to your project's dependencies as described above.</li> <li>Initialize the LabyMod 4 Server API before you call <code>MinecraftServer#start</code>:     <pre><code>LabyModProtocolService.initialize();\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your Minestom server.</li> </ol>"},{"location":"pages/server/#velocity-plugin","title":"Velocity Plugin","text":""},{"location":"pages/server/#running-the-server-api-as-a-plugin_2","title":"Running the Server API as a Plugin","text":"<ol> <li>Add the <code>server-velocity</code> dependency to your project's dependencies as described above.</li> <li>Download the latest version of the <code>server-velocity</code> jar file from the GitHub Releases.</li> <li>Place the jar file in your server's <code>plugins</code> folder.</li> <li>Add the following code to the <code>Plugin</code> annotation above your plugin's main class:     <pre><code>dependencies = {\n    @Dependency(id = \"labymod-server-api\")\n}\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your BungeeCord plugin.</li> </ol>"},{"location":"pages/server/#shading-the-server-api-into-your-plugin_2","title":"Shading the Server API into Your Plugin","text":"<ol> <li>Add the <code>server-velocity</code> dependency to your project's dependencies as described above.</li> <li>Configure shadow in your project's <code>build.gradle</code> or <code>pom.xml</code> to shade the <code>server-velocity</code> dependency into your plugin.</li> <li>Initialize the LabyMod 4 Server API in your plugin's <code>ProxyInitializeEvent</code> listener:     <pre><code>@Subscribe\npublic void onProxyInitialization(ProxyInitializeEvent event) {\n    LabyModProtocolService.initialize(this, this.server, this.logger);\n}\n</code></pre></li> <li>You're now ready to use the LabyMod 4 Server API in your Velocity plugin. </li> </ol>"},{"location":"pages/server/events/","title":"Events","text":"<p>When using an official platform-implementation of the LabyMod Server API, you can listen to the following events that are fired by the API:</p>"},{"location":"pages/server/events/#labymodplayerjoinevent","title":"LabyModPlayerJoinEvent","text":"<p>The <code>LabyModPlayerJoinEvent</code> is fired after a player has sent the VersionLoginPacket to the server.</p> Important Note <p>The <code>LabyModPlayer</code> object of the player is not available before this event is fired. It is fired after the join event of the respective server platform (f.e. <code>PlayerJoinEvent</code> on Bukkit).</p> <p>The following methods are available in this event:</p> <ul> <li><code>#labyModPlayer()</code> - Returns the <code>LabyModPlayer</code> object of the player.</li> <li><code>#protocolService()</code> - Returns the <code>LabyModProtocolService</code> instance.</li> </ul>"},{"location":"pages/server/events/#labymodpacketsentevent","title":"LabyModPacketSentEvent","text":"<p>The <code>LabyModPacketSentEvent</code> is fired after a packet has been sent to a player.</p> <p>The following methods are available in this event:</p> <ul> <li><code>#packet()</code> - Returns the packet that has been sent.</li> <li><code>#protocolService()</code> - Returns the <code>LabyModProtocolService</code> instance.</li> <li><code>#protocol()</code> - The protocol that the packet has been sent with.</li> <li><code>#getReceiver()</code> - Returns the unique id player that the packet has been sent to.</li> <li><code>#getLabyModPlayer()</code> - Returns the <code>LabyModPlayer</code> object of the player that the packet has been sent to. Can   be <code>null</code> if it's not a LabyMod player.</li> </ul>"},{"location":"pages/server/events/#labymodpacketreceiveevent","title":"LabyModPacketReceiveEvent","text":"<p>The <code>LabyModPacketReceiveEvent</code> is fired after a packet has been received from a player (and after all registered packet handlers have handled the packet).</p> <p>The following methods are available in this event:</p> <ul> <li><code>#packet()</code> - Returns the packet that was sent by the player.</li> <li><code>#protocolService()</code> - Returns the <code>LabyModProtocolService</code> instance.</li> <li><code>#protocol()</code> - The protocol that the packet was received on.</li> <li><code>#getSender()</code> - Returns the unique id player that has sent the packet.</li> <li><code>#getLabyModPlayer()</code> - Returns the <code>LabyModPlayer</code> object of the player that has sent the packet. Can be <code>null</code> if   it's not a LabyMod player.</li> </ul>"},{"location":"pages/server/events/#labymodinstalledaddonsupdateevent","title":"LabyModInstalledAddonsUpdateEvent","text":"<p>The <code>LabyModInstalledAddonsUpdateEvent</code> is fired either after the server received <code>InstalledAddonsResponsePacket</code> or <code>AddonStateChangedPacket</code>.</p> <p>The following methods are available in this event:</p> <ul> <li><code>#protocolService()</code> - Returns the <code>LabyModProtocolService</code> instance.</li> <li><code>#labyModPlayer()</code> - Returns the <code>LabyModPlayer</code> object of the player.</li> <li><code>#installedAddons()</code> - Returns the already updated <code>InstalledAddonsResponse</code> object which can also be accessed via <code>LabyModPlayer#installedAddons</code>.</li> </ul>"},{"location":"pages/server/integrations/","title":"Creating Integrations","text":"<p>Integrations are an integral part of the LabyMod 4 Server API. They provide a way to extend the server API with additional features and functionalities. Integrations can be used to interact with LabyMod addons seamlessly.</p>"},{"location":"pages/server/integrations/#official-integrations","title":"Official Integrations","text":"<p>We provide official integrations for addons developed by LabyMod utilizing the Server API. Their source code is available on GitHub.</p>"},{"location":"pages/server/integrations/#create-an-integration","title":"Create an Integration","text":"<p>Integrations are created on the abstract layer of the Server API to support both server and client-side with the same artifact. </p>"},{"location":"pages/server/integrations/#create-the-class","title":"Create the Class","text":"<p>Create a class that implements the interface <code>LabyModProtocolIntegration</code>. The interface provides two methods, <code>initialize(AbstractLabyModProtocolService)</code> and <code>createIntegrationPlayer(AbstractLabyModPlayer&lt;?&gt;)</code>. <code>initialize</code> is called when the integration is loaded and implementing this is required. <code>createIntegrationPlayer</code> is called when a LabyMod player connects to the server and implementing it is optional.</p> <pre><code>import net.labymod.serverapi.core.AbstractLabyModProtocolService;\nimport net.labymod.serverapi.core.integration.LabyModProtocolIntegration;\n\npublic class ExampleIntegration implements LabyModProtocolIntegration {\n\n  private AbstractLabyModProtocolService protocolService;\n\n  @Override\n  public void initialize(AbstractLabyModProtocolService protocolService) {\n    // Check if the field is already set, if so throw an exception. This is a good practice to\n    // prevent the integration from being initialized multiple times.\n    if (this.protocolService != null) {\n      throw new IllegalStateException(\"VoiceChatIntegration is already initialized\");\n    }\n\n    // Store the protocol service for later use\n    this.protocolService = protocolService;\n  }\n}\n</code></pre>"},{"location":"pages/server/integrations/#registering-the-service","title":"Registering the Service","text":"<p>While not required if you are using the Integration by calling <code>LabyModProtocolService#getOrRegisterIntegration</code> ( because the integration would be registered if not already), it is recommended to register the Integration as a service to automate the registering this process.</p>"},{"location":"pages/server/integrations/#registering-via-autoservice","title":"Registering via AutoService","text":"<p>To register the integration via AutoService, you first need to add the dependency to your project.</p>  Gradle (Kotlin DSL) Gradle (Groovy) Maven <pre><code>dependencies {\n    compileOnly(\"com.google.auto.service:auto-service:1.1.1\")\n    annotationProcessor(\"com.google.auto.service:auto-service:1.1.1\")\n}\n</code></pre> <pre><code>dependencies {\n    compileOnly \"com.google.auto.service:auto-service:1.1.1\" \n    annotationProcessor \"com.google.auto.service:auto-service:1.1.1\" \n}\n</code></pre> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.google.auto.service&lt;/groupId&gt;\n        &lt;artifactId&gt;auto-service&lt;/artifactId&gt;\n        &lt;version&gt;1.1.1&lt;/version&gt;\n        &lt;optional&gt;true&lt;/optional&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>After adding the dependency, you can annotate your integration class with <code>@AutoService(LabyModProtocolIntegration.class)</code>.</p>"},{"location":"pages/server/integrations/#registering-manually","title":"Registering Manually","text":"<p>To register the integration manually, create the directory <code>META-INF/services</code> in your resources folder and create a file named <code>net.labymod.serverapi.core.integration.LabyModProtocolIntegration</code> with the fully qualified name (package + class name) of your integration class.</p>"},{"location":"pages/server/integrations/#creating-a-protocol","title":"Creating a Protocol","text":"<p>To create a custom protocol, you can create a new instance of <code>AddonProtocol</code> in the <code>initialize</code> method of your integration.  Take a look at Create a Custom Protocol or the official VoiceChat integration on GitHub for an example.</p>"},{"location":"pages/server/packets/","title":"Creating Packets","text":"<p>In contrast to the LabyMod 3 Server API, the LabyMod 4 Server API doesn't communicate with JsonElements. Instead, it writes data directory into a ByteBuffer. This is a more efficient way of communication and allows for more flexibility in the data that can be sent.</p> <p>The downside of this is that it is even more important to read and write packets correctly. Therefore, it is recommended to share the classes on the server and client-side. The <code>core</code> artifact for example, is also shared between  the implementation in LabyMod 4 and the server.</p> <p>For an easier process of creating packets, we provide the classes <code>PayloadReader</code> and <code>PayloadWriter</code>. Both contain a variety of methods to read and write data from and to the ByteBuffer for any types thinkable. From collections and arrays to nullable objects.</p> <p>If you are still unsure if you are doing everything correctly, please don't hesitate to check out the Packets of the LabyMod Protocol on GitHub or ask on our Discord Server for Developers.</p>"},{"location":"pages/server/packets/#creating-a-packet","title":"Creating a Packet","text":"<p>For our example packet, we'll be reading and writing a nullable component, an integer and a collection of objects with a string and a bunch of booleans.</p> <p>First, we'll create that implements the <code>Packet</code> interface. And create all the fields we want to read and write. Also, we create a record for the object that our List will contain.  Don't mind the field names, they are just placeholders for this example.</p> <pre><code>import net.labymod.serverapi.api.model.component.ServerAPIComponent;\nimport net.labymod.serverapi.api.packet.Packet;\nimport net.labymod.serverapi.api.payload.io.PayloadReader;\nimport net.labymod.serverapi.api.payload.io.PayloadWriter;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\n\npublic class ExamplePacket implements Packet {\n\n  private ServerAPIComponent component;\n  private int color;\n  private List&lt;ExamplePacketObject&gt; objects;\n\n  public ExamplePacket(\n      @Nullable ServerAPIComponent component,\n      @NotNull List&lt;ExamplePacketObject&gt; objects,\n      int color\n  ) {\n    // Throw an exception if the list is null\n    Objects.requireNonNull(objects, \"Objects list cannot be null\");\n\n    // Assign the values to the fields\n    this.component = component;\n    this.objects = objects;\n    this.color = color;\n  }\n\n  public @Nullable ServerAPIComponent getComponent() {\n    return this.component;\n  }\n\n  public int getColor() {\n    return this.color;\n  }\n\n  /**\n   * This can be annotated with {@link NotNull}, as the list is never null. \n   * We know that because our constructor is throwing an exception if no list\n   * is provided. And if for some reason the list is null upon reading, it \n   * will never be handed over to the PacketHandler.\n   */\n  public @NotNull List&lt;ExamplePacketObject&gt; getObjects() {\n    return this.objects;\n  }\n\n  /**\n   * It's always a good idea to override the {@link Object#toString()} method to\n   * provide a human-readable representation of the object.\n   */\n  @Override\n  public String toString() {\n    return \"ExamplePacket{\" +\n        \"component=\" + component +\n        \", color=\" + color +\n        '}';\n  }\n\n  /**\n   * The record is a simple data class that is used to store the data of\n   * the objects list.\n   */\n  public record ExamplePacketObject(\n      String name,\n      boolean editable,\n      boolean createdByUser,\n      boolean global\n  ) {\n\n    /**\n     * It's always a good idea to override the {@link Object#toString()} method \n     * to provide a human-readable representation of the object.\n     */\n    @Override\n    public String toString() {\n      return \"ExamplePacketObject{\" +\n          \"name='\" + name + '\\'' +\n          \", editable=\" + editable +\n          \", createdByUser=\" + createdByUser +\n          \", global=\" + global +\n          '}';\n    }\n  }\n}\n</code></pre>"},{"location":"pages/server/packets/#write-the-packet","title":"Write the Packet","text":"<p>To write the packet, we need to override the <code>write</code> method of the <code>Packet</code> interface. Be sure not to call <code>super.write</code>, as this will throw an exception upon writing the packet.</p> Important <p>Always keep in mind that the order of writing and reading the values of the Packet must be the same, also the types must match. You can't write a variable integer and read a normal integer. If you are unsure what to do (or whether what you've done is correct), don't hesitate to ask on our Discord Server for Developers.</p> <pre><code>@Override\npublic void write(@NotNull PayloadWriter writer) {\n  // Write the nullable component\n  writer.writeOptional(\n      this.component, // The component\n      writer::writeComponent // the consumer to write the component\n  );\n\n  // Write the color. We're using writeVarInt here, as variable integers are \n  // more efficient on the network stack for smaller values. Alternatively \n  // you can use PayloadWriter#writeInt\n  writer.writeVarInt(this.color);\n\n  // Write the list of objects\n  writer.writeCollection(\n      this.objects, // The list to write\n      object -&gt; { // the consumer is called for every object in the list\n        // write the name\n        writer.writeString(object.name());\n\n        // write the boolean values\n        writer.writeBoolean(object.editable());\n        writer.writeBoolean(object.createdByUser());\n        writer.writeBoolean(object.global());\n      }\n  );\n}\n</code></pre>"},{"location":"pages/server/packets/#read-the-packet","title":"Read the Packet","text":"<p>To read the packet, we need to override the <code>read</code> method of the <code>Packet</code> interface. Be sure not to call <code>super.read</code>, as this will throw an exception upon reading the packet.</p> Important <p>Always keep in mind that the order of writing and reading the values of the Packet must be the same, also the types must match. You can't write a variable integer and read a normal integer. If you are unsure what to do (or if what you've done is correct), don't hesitate to ask on our Discord Server for Developers.</p> <pre><code>@Override\npublic void read(@NotNull PayloadReader reader) {\n  // Read the optional component\n  this.component = reader.readOptional(reader::readComponent);\n\n  // Read the color as variable integer. \n  this.color = reader.readVarInt();\n\n  // Read the list of objects\n  this.objects = reader.readList(() -&gt; { // the supplier is called for every object in the list\n    return new ExamplePacketObject(\n        reader.readString(), // read the name\n        reader.readBoolean(), // read the editable boolean\n        reader.readBoolean(), // read the createdByUser boolean\n        reader.readBoolean() // read the global boolean\n    );\n  });\n}\n</code></pre>"},{"location":"pages/server/packets/#final-words","title":"Final Words","text":"<p>That's it. You've successfully created a packet that can be sent the to or from the server.  Now all you have to do is to register the Packet in your Protocol. </p>"},{"location":"pages/server/protocols/","title":"Working with Protocols","text":"<p>Protocols are collections of packets that are used to communicate between the client and the server.  Addons can create custom protocols to send and receive custom packets.  The LabyMod 4 Server API provides the LabyMod Protocol that is used to communicate with the LabyMod client.</p>"},{"location":"pages/server/protocols/#the-labymod-protocol","title":"The LabyMod Protocol","text":"<p>The LabyMod Protocol is the default protocol, it contains all official features that servers can use to customize the experience of LabyMod players.</p> <p>A collection of all available features can be found here.</p>"},{"location":"pages/server/protocols/#registering-handlers","title":"Registering Handlers","text":"<p>To register a packet handler in the LabyMod Protocol, you first need to create a new class implementing the <code>PacketHandler</code> interface. We'll use the VersionLoginPacket in the following example.</p> <pre><code>import net.labymod.serverapi.api.packet.PacketHandler;\nimport net.labymod.serverapi.core.packet.serverbound.login.VersionLoginPacket;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.UUID;\n\npublic class VersionLoginPacketHandler implements PacketHandler&lt;VersionLoginPacket&gt; {\n\n  /**\n   * Handles the VersionLoginPacket\n   * \n   * @param sender the unique id of the sender of the packet\n   * @param packet the packet that was sent\n   */\n  @Override\n  public void handle(@NotNull UUID sender, @NotNull VersionLoginPacket packet) {\n    // Perform logic to handle the packet\n  }\n}\n</code></pre> <p>After creating the handler, you can register it in the LabyMod Protocol.</p> <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Register the handler\nlabyModProtocol.registerHandler(\n    VersionLoginPacket.class, // The packet class\n    new VersionLoginPacketHandler() // Object of the handler (can also be a lambda)\n);\n</code></pre>"},{"location":"pages/server/protocols/#create-a-custom-protocol","title":"Create a Custom Protocol","text":"<p>To create a custom protocol, you can create a new instance of <code>AddonProtocol</code> by calling the constructor with the protocol service and namespace as parameters. Then register the protocol in the ProtocolRegistry.</p> <pre><code>// Get the Protocol Service\nLabyModProtocolService protocolService = LabyModProtocolService.get();\n\n// Create a new AddonProtocol\nAddonProtocol protocol = new AddonProtocol(protocolService, \"example\");\n\n// Register the protocol\nprotocolService.registry().registerProtocol(protocol);\n</code></pre>"},{"location":"pages/server/protocols/#register-a-packet","title":"Register a Packet","text":"<p>To register a packet, you first need to create a Packet. After doing that, you can just register the packet in the protocol.</p>  With Handler Without Handler <pre><code>// Register the Packet with handler\nprotocol.registerPacket(\n    0, // the id of the packet. Must be unique in the protocol on both sides\n    ExamplePacket.class, // the class of the packet\n    Direction.CLIENTBOUND, // the direction of the packet. Can also be SERVERBOUND or BOTH\n    new ExamplePacketHandler() // the handler of the packet\n);\n</code></pre> <pre><code>// Register the Packet without handler. Handler can be registered later.\n// See above for registering a handler separately\nprotocol.registerPacket(\n    0, // the id of the packet. Must be unique in the protocol on both sides\n    ExamplePacket.class, // the class of the packet\n    Direction.CLIENTBOUND // the direction of the packet. Can also be SERVERBOUND or BOTH\n);\n</code></pre>"},{"location":"pages/server/addons/betterperspective/","title":"BetterPerspective","text":"<p>The BetterPerspective integration provides the unlock camera permission.</p>"},{"location":"pages/server/addons/betterperspective/#adding-the-dependency","title":"Adding the Dependency","text":"<p>The BetterPerspective integration is shipped with all official server platform integration artifacts. If you are using the <code>core</code> artifact, you can add the following dependency to your project:</p> Important Note <p>For the examples below, <code>VERSION</code> with the version you want to use. The latest version can be found here: </p>  Gradle (Kotlin DSL) Gradle (Groovy) Maven <pre><code>dependencies {\n    compileOnly(\"net.labymod.serverapi.integration:betterperspective:VERSION\")\n}\n</code></pre> <pre><code>dependencies {\n    compileOnly \"net.labymod.serverapi.integration:betterperspective:VERSION\"\n}\n</code></pre> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;net.labymod.serverapi.integration&lt;/groupId&gt;\n    &lt;artifactId&gt;betterperspective&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"pages/server/addons/betterperspective/#unlock-camera-permission","title":"Unlock Camera Permission","text":"<p>While not necessary to use, the integration provides a constant for the unlock camera permission methods to toggle the permission easily.</p> Note <p>The Unlock Camera permission is enabled by default.</p>"},{"location":"pages/server/addons/betterperspective/#via-betterperspectiveplayer","title":"Via BetterPerspectivePlayer","text":"Disable Unlock Camera Enable Unlock Camera <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the BetterPerspectivePlayer\nBetterPerspectivePlayer betterPerspectivePlayer = labyModPlayer.getIntegrationPlayer(\n    BetterPerspectivePlayer.class\n);\n\n// Disable the permission\nbetterPerspectivePlayer.denyUnlockCamera();\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the BetterPerspectivePlayer\nBetterPerspectivePlayer betterPerspectivePlayer = labyModPlayer.getIntegrationPlayer(\n    BetterPerspectivePlayer.class\n);\n\n// Enable the permission\nbetterPerspectivePlayer.allowUnlockCamera();\n</code></pre>"},{"location":"pages/server/addons/betterperspective/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"Disable Unlock Camera Enable Unlock Camera <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new PermissionPacket(\n    BetterPerspectiveIntegration.UNLOCK_CAMERA_PERMISSION.deny()\n));\n</code></pre> <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new PermissionPacket(\n    BetterPerspectiveIntegration.UNLOCK_CAMERA_PERMISSION.allow()\n));\n</code></pre>"},{"location":"pages/server/addons/voicechat/","title":"Overview","text":"<p>The VoiceChat integration provides a way to manage the voice chat server-side.</p>"},{"location":"pages/server/addons/voicechat/#adding-the-dependency","title":"Adding the Dependency","text":"<p>The VoiceChat integration is shipped with all official server platform integration artifacts. If you are using the <code>core</code> artifact, you can add the following dependency to your project:</p> Important Note <p>For the examples below, <code>VERSION</code> with the version you want to use. The latest version can be found here: </p>  Gradle (Kotlin DSL) Gradle (Groovy) Maven <pre><code>dependencies {\n    compileOnly(\"net.labymod.serverapi.integration:voicechat:VERSION\")\n}\n</code></pre> <pre><code>dependencies {\n    compileOnly \"net.labymod.serverapi.integration:voicechat:VERSION\"\n}\n</code></pre> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;net.labymod.serverapi.integration&lt;/groupId&gt;\n    &lt;artifactId&gt;voicechat&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"pages/server/addons/voicechat/mute/","title":"Mute Players","text":"<p>The <code>VoiceChatMutePacket</code> is a client-bound packet provided by the VoiceChat integration, that allows servers to mute any player in the voice chat on their server.</p>"},{"location":"pages/server/addons/voicechat/mute/#creating-the-mute-model","title":"Creating the Mute Model","text":"<p>The packet uses the <code>VoiceChatMute</code> model, which can be created with <code>VoiceChatMute.create</code>.</p> <pre><code>// Create the mute model\n// For a permanent mute, remove the timestamp parameter\nVoiceChatMute voiceChatMute = VoiceChatMute.create(\n    uniqueId, // The UUID of the player to mute\n    \"Example Mute Reason\", // The reason for the mute. Can be null\n    System.currentTimeMillis() + 60000 // The timestamp until the mute expires.\n);\n</code></pre>"},{"location":"pages/server/addons/voicechat/mute/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>VoiceChatPlayer</code> or the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code></p> <p>If you are using the <code>VoiceChatPlayer</code> to mute a player, the mute will automatically be sent to every LabyMod player on  the server. LabyMod players connecting to the server will also be sent every mute that is currently active automatically.</p>"},{"location":"pages/server/addons/voicechat/mute/#via-voicechatplayer-recommended","title":"Via VoiceChatPlayer (Recommended)","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the VoiceChatPlayer\nVoiceChatPlayer voiceChatPlayer = labyModPlayer.getIntegrationPlayer(VoiceChatPlayer.class);\n\n// Mute the player\nvoiceChatPlayer.mute(voiceChatMute);\n</code></pre>"},{"location":"pages/server/addons/voicechat/mute/#via-the-addonprotocol","title":"Via the AddonProtocol","text":"<p>While not recommended, it is also possible to send the mutes directly via the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code>.</p> Important Note <p>When sending mutes directly via the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code>, you will have to store all mutes yourself and send them to every player manually.</p> <pre><code>// Create or get a List of mutes (array is also possible)\nList&lt;VoiceChatMute&gt; mutes = new ArrayList&lt;&gt;();\n\n// Add all mutes that you want to send to the player\nmutes.add(voiceChatMute);\n\n// Get the VoiceChatIntegration\n// #getOrRegisterIntegration is a fail-safe method to get the integration, even \n// if the integration has not been registered.  Alternatively, you can use \n// #getIntegration, which will return null if the integration has not been registered.\nVoiceChatIntegration voiceChatIntegration = LabyModProtocolService.get().getOrRegisterIntegration(\n    VoiceChatIntegration.class,\n    VoiceChatIntegration::new\n);\n\n// Get the AddonProtocol\nAddonProtocol addonProtocol = voiceChatIntegration.voiceChatProtocol();\n\n// Send the packet\naddonProtocol.sendPacket(uniqueId, new VoiceChatMutePacket(mutes));\n</code></pre>"},{"location":"pages/server/addons/voicechat/mute/#via-the-labymod-player","title":"Via the LabyMod Player","text":"<p>While not recommended, it is also possible to send the packet directly via the <code>LabyModPlayer</code>. This will basically skip the \"protocol-getting\" process, as it will search for the protocol automatically. </p> Important Note <p>When sending mutes directly via the <code>LabyModPlayer</code>, you will have to store all mutes yourself and send them to every player manually.</p> <pre><code>// Create or get a List of mutes (array is also possible)\nList&lt;VoiceChatMute&gt; mutes = new ArrayList&lt;&gt;();\n\n// Add all mutes that you want to send to the player\nmutes.add(voiceChatMute);\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the packet\nlabyModPlayer.sendPacket(new VoiceChatMutePacket(mutes));\n</code></pre>"},{"location":"pages/server/addons/voicechat/open-channels/","title":"Open Channels","text":"<p>The <code>VoiceChatOpenChannelsPacket</code> is a client-bound packet provided by the VoiceChat integration, that allows servers to open the voice channels popup.</p>"},{"location":"pages/server/addons/voicechat/open-channels/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>VoiceChatPlayer</code> or the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code></p>"},{"location":"pages/server/addons/voicechat/open-channels/#via-voicechatplayer","title":"Via VoiceChatPlayer","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the VoiceChatPlayer\nVoiceChatPlayer voiceChatPlayer = labyModPlayer.getIntegrationPlayer(VoiceChatPlayer.class);\n\n// Open the VoiceChat Channels Widget\nvoiceChatPlayer.openVoiceChatChannels();\n</code></pre>"},{"location":"pages/server/addons/voicechat/open-channels/#via-the-addonprotocol","title":"Via the AddonProtocol","text":"<pre><code>// Get the VoiceChatIntegration\n// #getOrRegisterIntegration is a fail-safe method to get the integration, even \n// if the integration has not been registered.  Alternatively, you can use \n// #getIntegration, which will return null if the integration has not been registered.\nVoiceChatIntegration voiceChatIntegration = LabyModProtocolService.get().getOrRegisterIntegration(\n    VoiceChatIntegration.class,\n    VoiceChatIntegration::new\n);\n\n// Get the AddonProtocol\nAddonProtocol addonProtocol = voiceChatIntegration.voiceChatProtocol();\n\n// Send the packet\naddonProtocol.sendPacket(uniqueId, new VoiceChatOpenChannelsPacket());\n</code></pre>"},{"location":"pages/server/addons/voicechat/open-channels/#via-the-labymod-player","title":"Via the LabyMod Player","text":"<p>While not recommended, it is also possible to send the packet directly via the <code>LabyModPlayer</code>. This will basically skip the \"protocol-getting\" process, as it will search for the protocol automatically. </p> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the packet\nlabyModPlayer.sendPacket(new VoiceChatOpenChannelsPacket());\n</code></pre>"},{"location":"pages/server/addons/voicechat/unmute/","title":"Unmute a Player","text":"<p>The <code>VoiceChatUnmutePacket</code> is a client-bound packet provided by the VoiceChat integration, that allows servers to remove the server-bound mute from a player in the voice chat.</p>"},{"location":"pages/server/addons/voicechat/unmute/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>VoiceChatPlayer</code> or the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code></p> <p>If you are using the <code>VoiceChatPlayer</code> to unmute a player, the unmute will automatically be sent to every LabyMod player on the server. </p>"},{"location":"pages/server/addons/voicechat/unmute/#via-voicechatplayer-recommended","title":"Via VoiceChatPlayer (Recommended)","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the VoiceChatPlayer\nVoiceChatPlayer voiceChatPlayer = labyModPlayer.getIntegrationPlayer(VoiceChatPlayer.class);\n\n// Unmute the player\nvoiceChatPlayer.unmute();\n</code></pre>"},{"location":"pages/server/addons/voicechat/unmute/#via-the-addonprotocol","title":"Via the AddonProtocol","text":"<p>While not recommended, it is also possible to send the unmutes directly via the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code>.</p> Important Note <p>When sending (un)mutes directly via the <code>AddonProtocol</code> of the <code>VoiceChatIntegration</code>, you will have to store all mutes yourself and send them to every player manually.</p> <pre><code>// Get the VoiceChatIntegration\n// #getOrRegisterIntegration is a fail-safe method to get the integration, even \n// if the integration has not been registered.  Alternatively, you can use \n// #getIntegration, which will return null if the integration has not been registered.\nVoiceChatIntegration voiceChatIntegration = LabyModProtocolService.get().getOrRegisterIntegration(\n    VoiceChatIntegration.class,\n    VoiceChatIntegration::new\n);\n\n// Get the AddonProtocol\nAddonProtocol addonProtocol = voiceChatIntegration.voiceChatProtocol();\n\n// Send the packet\naddonProtocol.sendPacket(uniqueId, new VoiceChatUnmutePacket(uniqueId));\n</code></pre>"},{"location":"pages/server/addons/voicechat/unmute/#via-the-labymod-player","title":"Via the LabyMod Player","text":"<p>While not recommended, it is also possible to send the packet directly via the <code>LabyModPlayer</code>. This will basically skip the \"protocol-getting\" process, as it will search for the protocol automatically.</p> Important Note <p>When sending (un)mutes directly via the <code>LabyModPlayer</code>, you will have to store all mutes yourself and send them to every player manually.</p> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the packet\nlabyModPlayer.sendPacket(new VoiceChatUnmutePacket(uniqueId));\n</code></pre>"},{"location":"pages/server/labymod/overview/","title":"Overview","text":"<p>The following features are currently available in the LabyMod Protocol:</p>"},{"location":"pages/server/labymod/overview/#server-displays","title":"Server Displays","text":"<ul> <li>Economy Displays</li> <li>Subtitles</li> <li>TabList Server Banner</li> <li>TabList Country Flags</li> </ul>"},{"location":"pages/server/labymod/overview/#features","title":"Features","text":"<ul> <li>Discord Rich Presence</li> <li>Emote API</li> <li>Playing Game Mode</li> <li>Interaction Menu Entries</li> <li>Markers</li> </ul>"},{"location":"pages/server/labymod/overview/#moderation","title":"Moderation","text":"<ul> <li>Addon Recommendations</li> <li>Get the Installed Addons</li> <li>Disable Addons</li> <li>Get the LabyMod Version</li> <li>Permissions</li> </ul>"},{"location":"pages/server/labymod/overview/#supplements","title":"Supplements","text":"<ul> <li>Input Prompts</li> <li>Server Switch Prompts</li> </ul>"},{"location":"pages/server/labymod/overview/#planned-features","title":"Planned Features","text":"<p>These features are planned for the future but are not yet available:</p> <ul> <li>Sending Notifications</li> </ul> <p>You have a feature request? Feel free to create an issue on GitHub or post it on our Discord for Developers.</p>"},{"location":"pages/server/labymod/displays/economy/","title":"Economy Display","text":"<p>The <code>EconomyDisplayPacket</code> is a client-bound packet that allows servers to display balance information of multiple virtual currencies in the HUD of the LabyMod player.</p> <p></p>"},{"location":"pages/server/labymod/displays/economy/#the-economy-display-model","title":"The Economy Display Model","text":"<p>There are several constructors available in the <code>EconomyDisplay</code> class. If you're managing the Economy Displays with the LabyModPlayer object, you won't need to create the model yourself.</p> <p>The following methods are available to update the values of an Economy Display:</p> <ul> <li><code>#balance(double)</code> - Updates the balance of the economy. Default is <code>0</code>.</li> <li><code>#visible(boolean)</code> - Updates the visibility state of the economy. Default is <code>true</code>.</li> <li><code>#iconUrl(String)</code> - Allows you to update the icon of the economy. Default is <code>null</code>.</li> <li><code>#decimalFormat(DecimalFormat)</code> - Allows you to update the format and divisor of the economy.</li> </ul> Note <p>When sending an custom Economy Display (meaning that the key is neither <code>bank</code> nor <code>cash</code>) to the player and no icon url is set, the default icon of the cash economy will be used.</p>"},{"location":"pages/server/labymod/displays/economy/#managing-via-labymodplayer-recommended","title":"Managing via LabyModPlayer (Recommended)","text":"<p>The <code>LabyModPlayer</code> class provides a range of methods to manage the economy displays.</p>"},{"location":"pages/server/labymod/displays/economy/#get-an-economy-display","title":"Get an Economy Display","text":"<p>All economy displays updated or sent with either the update or send method will be stored in the <code>LabyModPlayer</code> object.  Economies sent outside the LabyModPlayer object cannot be accessed via the methods below.</p>  Bank Economy Cash Economy Custom Economy <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the Bank Economy Display\nEconomyDisplay bankEconomy = labyModPlayer.bankEconomy();\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the Cash Economy Display\nEconomyDisplay cashEconomy = labyModPlayer.cashEconomy();\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Get the Custom Economy Display. Replace \"custom\" with the key of your custom \n// economy\nEconomyDisplay customEconomy = labyModPlayer.getEconomy(\"custom\"); // Nullable!\n</code></pre>"},{"location":"pages/server/labymod/displays/economy/#update-an-economy-display","title":"Update an Economy Display","text":"<p>You can directly update the economy stored in the <code>LabyModPlayer</code> object and send it to the player.</p> <p>Methods to update the economy display's values are shown in the Economy Display Model.</p>  Bank Economy Cash Economy Custom Economy <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Update the Bank Economy Display\nlabyModPlayer.updateBankEconomy(economy -&gt; {\n  // Update the values of the economy\n});\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Update the Cash Economy Display\nlabyModPlayer.updateCashEconomy(economy -&gt; {\n  // Update the values of the economy\n});\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Update the Custom Economy Display. Replace \"custom\" with the key of your \n// custom economy\nlabyModPlayer.updateEconomy(\"custom\", economy -&gt; {\n  // Update the values of the economy\n});\n</code></pre>"},{"location":"pages/server/labymod/displays/economy/#send-an-economy-display","title":"Send an Economy Display","text":"<p>When updating an economy, you can either use Update an Economy Display or the following method to store and send it to the player.</p> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Store and Send the Economy Display\nlabyModPlayer.sendEconomy(economyDisplay);\n</code></pre>"},{"location":"pages/server/labymod/displays/economy/#sending-via-the-labymodprotocol","title":"Sending via the LabyModProtocol","text":"<p>While not recommended, it is also possible to send the economy displays directly via the <code>LabyModProtocol</code>. But keep in mind, that you have to store the economies yourself if you want to update them later.</p> <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new EconomyDisplayPacket(economyDisplay));\n</code></pre>"},{"location":"pages/server/labymod/displays/subtitles/","title":"Subtitles","text":"<p>The <code>SubtitlePacket</code> is a client-bound packet that allows servers to display a subtitle to the player. The subtitle is displayed below the player's name tag.</p>"},{"location":"pages/server/labymod/displays/subtitles/#the-subtitle-model","title":"The Subtitle Model","text":"<p>The <code>Subtitle</code> class provides several factory methods. If you're managing the Subtitles with the <code>LabyModPlayer</code> object, you won't need to create the model yourself.</p> <p>The following methods are available to update the values of an Economy Display:</p> <ul> <li><code>#text(ServerAPIComponent)</code> - Updates the text of the subtitle. Default is <code>null</code>.</li> <li><code>#size(double)</code> - Updates the size of the subtitle. Default is <code>1</code>.</li> </ul>"},{"location":"pages/server/labymod/displays/subtitles/#managing-via-labymodplayer-recommended","title":"Managing via LabyModPlayer (Recommended)","text":"<p>The <code>LabyModPlayer</code> class provides a range of methods to manage the subtitles.</p> <p>Additionally, if you use the methods below, subtitles are automatically sent to every other LabyMod player on the server. LabyMod players connecting to the server will also be sent every subtitle that is currently active automatically.</p>"},{"location":"pages/server/labymod/displays/subtitles/#updating-the-subtitle","title":"Updating the Subtitle","text":"<p>Updating the subtitle allows you to change the text and size of the subtitle. If no subtitle was set before, a new one will be created.</p>  Update Text Update Text and Size <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Update the Subtitle text\nlabyModPlayer.updateSubtitle(ServerAPIComponent.text(\"Example Subtitle\"));\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Update the Subtitle text and size\nlabyModPlayer.updateSubtitle(ServerAPIComponent.text(\"Example Subtitle\"), 0.5D);\n</code></pre>"},{"location":"pages/server/labymod/displays/subtitles/#reset-the-subtitle","title":"Reset the Subtitle","text":"<p>Resetting the subtitle will remove the subtitle from the player.</p> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Reset the subtitle\nlabyModPlayer.resetSubtitle();\n</code></pre>"},{"location":"pages/server/labymod/displays/subtitles/#sending-via-the-labymodprotocol","title":"Sending via the LabyModProtocol","text":"<p>While not recommended, it is also possible to send the subtitles directly via the <code>LabyModProtocol</code>.</p> Important Note <p>When sending subtitles directly via the <code>LabyModProtocol</code>, you will have to store all subtitles yourself and send them to every player manually.</p> <pre><code>// Create or get a List of subtitles (array is also possible)\nList&lt;Subtitle&gt; subtitles = new ArrayList&lt;&gt;();\n\n// Add all subtitles you want to send to the player\nsubtitles.add(Subtitle.create(uniqueId, ServerAPIComponent.text(\"Example Subtitle\")));\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new SubtitlePacket(subtitles));\n</code></pre>"},{"location":"pages/server/labymod/displays/tablist-banner/","title":"Tablist Banner","text":"<p>The <code>TabListBannerPacket</code> is a client-bound packet that allows servers to add a custom banner above the player list.</p> Important Note <p>The aspect ratio of the image must be <code>5:1</code> and the recommended resolution is <code>1280x256</code> pixels.</p> <p></p>"},{"location":"pages/server/labymod/displays/tablist-banner/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p> <p>The value can either be a URL to the image or <code>null</code> to unset the banner.</p>"},{"location":"pages/server/labymod/displays/tablist-banner/#via-labymodplayer","title":"Via LabyModPlayer","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the tab list banner\nlabyModPlayer.sendTabListBanner(\"https://example.com/banner.png\");\n</code></pre>"},{"location":"pages/server/labymod/displays/tablist-banner/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new TabListBannerPacket(\"https://example.com/banner.png\"));\n</code></pre>"},{"location":"pages/server/labymod/displays/tablist-flags/","title":"Tablist Flags","text":"<p>The <code>TabListFlagPacket</code> is a client-bound packet that allows servers to display a flag in the tab list next to the player's name.</p>"},{"location":"pages/server/labymod/displays/tablist-flags/#managing-via-labymodplayer-recommended","title":"Managing via LabyModPlayer (Recommended)","text":"<p>The <code>LabyModPlayer</code> class provides a method to manage the tab list flags.</p> <p>Additionally, if you use the method below, flags are automatically sent to every LabyMod player on the server. LabyMod players connecting to the server will also be sent every flag that is currently active automatically.</p> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Set the country code of the flag\nlabyModPlayer.setTabListFlag(TabListFlagCountryCode.DE);\n</code></pre>"},{"location":"pages/server/labymod/displays/tablist-flags/#sending-via-the-labymodprotocol","title":"Sending via the LabyModProtocol","text":"<p>While not recommended, it is also possible to send the flags directly via the <code>LabyModProtocol</code>.</p> Important Note <p>When sending flags directly via the <code>LabyModProtocol</code>, you will have to store all flags yourself and send them to every player manually.</p> <pre><code>// Create or get a List of flags (array is also possible)\nList&lt;TabListFlag&gt; flags = new ArrayList&lt;&gt;();\n\n// Add all flags you want to send to the player\nflags.add(TabListFlag.create(uniqueId, TabListFlagCountryCode.DE));\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new TabListFlagPacket(flags));\n</code></pre>"},{"location":"pages/server/labymod/features/discord/","title":"Discord RPC","text":"<p>The <code>DiscordRPCPacket</code> is a client-bound packet that allows servers to customize the Discord Rich Presence of their players.</p>"},{"location":"pages/server/labymod/features/discord/#creating-a-discord-rich-presence","title":"Creating a Discord Rich Presence","text":""},{"location":"pages/server/labymod/features/discord/#with-game-mode","title":"With Game Mode","text":"<p>Create the model with <code>DiscordRichPresence.create</code> to create a Discord Rich Presence with the current game mode. <pre><code>DiscordRPC discordRPC = DiscordRPC.create(\"Example Game Mode\");\n</code></pre></p>"},{"location":"pages/server/labymod/features/discord/#with-game-mode-and-start-time","title":"With Game Mode and Start Time","text":"<p>Create the model with <code>DiscordRichPresence.createWithStart</code> to create a Discord Rich Presence with the current game mode and the start time. <pre><code>DiscordRPC discordRPC = DiscordRPC.createWithStart(\"Example Game Mode\", System.currentTimeMillis());\n</code></pre></p>"},{"location":"pages/server/labymod/features/discord/#with-game-mode-and-end-time","title":"With Game Mode and End Time","text":"<p>Create the model with <code>DiscordRichPresence.createWithEnd</code> to create a Discord Rich Presence with the current game mode and the end time. <pre><code>DiscordRPC discordRPC = DiscordRPC.createWithEnd(\"Example Game Mode\", System.currentTimeMillis());\n</code></pre></p>"},{"location":"pages/server/labymod/features/discord/#reset-to-default","title":"Reset to Default","text":"<p>Create the model with <code>DiscordRichPresence.reset</code> to reset the Discord Rich Presence to the default state. <pre><code>DiscordRPC discordRPC = DiscordRPC.createReset();\n</code></pre></p>"},{"location":"pages/server/labymod/features/discord/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p>"},{"location":"pages/server/labymod/features/discord/#via-labymodplayer","title":"Via LabyModPlayer","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the discord rpc model\nlabyModPlayer.sendDiscordRPC(discordRPC);\n</code></pre>"},{"location":"pages/server/labymod/features/discord/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new DiscordRPCPacket(discordRPC));\n</code></pre>"},{"location":"pages/server/labymod/features/emotes/","title":"Emotes","text":"<p>The <code>EmotePacket</code> is a client-bound packet that allows servers to let NPCs perform emotes.</p> Important Note <p>To prevent abuse, this does not work for real players. You can only perform emotes on players that have the second half of their UUID entirely being 0 (-&gt; 64 least significant bits are 0, or the second long value equals 0). You therefore need to spawn them with a uuid like this.</p>"},{"location":"pages/server/labymod/features/emotes/#creating-the-emote-model","title":"Creating the Emote Model","text":"<p>The packet uses the <code>Emote</code> model.</p>"},{"location":"pages/server/labymod/features/emotes/#play-an-emote","title":"Play an Emote","text":"<p>Create the model with <code>Emote.play(UUID, int)</code> to create an emote with the unique id of the npc and the id of the emote to perform. <pre><code>Emote emote = Emote.play(npcUniqueId, 2);\n</code></pre></p>"},{"location":"pages/server/labymod/features/emotes/#stop-an-emote","title":"Stop an Emote","text":"<p>Create the model with <code>Emote.stop(UUID)</code> to stop the current emote of the npc. <pre><code>Emote emote = Emote.stop(npcUniqueId);\n</code></pre></p>"},{"location":"pages/server/labymod/features/emotes/#sending-the-packet","title":"Sending the Packet","text":"<pre><code>// Create a List of emotes (array is also possible)\nList&lt;Emote&gt; emotes = new ArrayList&lt;&gt;();\n\n// Add all emotes you want to perform\nemotes.add(emote);\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new EmotePacket(emotes));\n</code></pre>"},{"location":"pages/server/labymod/features/emotes/#available-emotes","title":"Available Emotes","text":"<p>The following emotes are available:</p>"},{"location":"pages/server/labymod/features/gamemode/","title":"Gamemode","text":"<p>The <code>PlayingGameModePacket</code> is a client-bound packet that sends the current game mode to the player's LabyMod Chat friends.</p> <p></p>"},{"location":"pages/server/labymod/features/gamemode/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p> <p>The value can be a string that represents the current game mode, or <code>null</code> to unset the current game mode.</p>"},{"location":"pages/server/labymod/features/gamemode/#via-labymodplayer","title":"Via LabyModPlayer","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the game mode\nlabyModPlayer.sendPlayingGameMode(\"Example Game Mode\");\n</code></pre>"},{"location":"pages/server/labymod/features/gamemode/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(\n    uniqueId, \n    new PlayingGameModePacket(\"Example Game Mode\")\n);\n</code></pre>"},{"location":"pages/server/labymod/features/interaction-menu/","title":"Interaction Menu","text":"<p>The <code>InteractionMenuPacket</code> is a client-bound packet that allows servers to add custom interaction menu entries.</p> <p></p>"},{"location":"pages/server/labymod/features/interaction-menu/#creating-an-interaction-menu-entry","title":"Creating an Interaction Menu Entry","text":"<p>The packet uses the <code>InteractionMenuEntry</code> model, which can be created with <code>InteractionMenuEntry.create</code>. The InteractionMenuEntry model uses the Server API's own Component model.</p>"},{"location":"pages/server/labymod/features/interaction-menu/#actions","title":"Actions","text":"<p>There are four different types of actions an interaction menu entry can perform:</p> <ul> <li><code>InteractionMenuType.RUN_COMMAND</code> - Executes the value as command.</li> <li><code>InteractionMenuType.CLIPBOARD</code> - Copies the value to the clipboard.</li> <li><code>InteractionMenuType.SUGGEST_COMMAND</code> - Opens the chat and suggests the value.</li> <li><code>InteractionMenuType.OPEN_BROWSER</code> - Opens the web browser with the value as URL.</li> </ul>"},{"location":"pages/server/labymod/features/interaction-menu/#value-placeholders","title":"Value Placeholders","text":"<p>The value can contain the following placeholders (addons may add custom placeholders):</p> <ul> <li><code>{name}</code> - Will be replaced with the player's name.</li> <li><code>{uuid}</code> - Will be replaced with the player's unique id.</li> </ul>"},{"location":"pages/server/labymod/features/interaction-menu/#example","title":"Example","text":"<pre><code>InteractionMenuEntry exampleEntry = InteractionMenuEntry.create(\n    ServerAPIComponent.text(\"Example Entry\").color(ServerAPITextColor.YELLOW),\n    InteractionMenuEntry.InteractionMenuType.RUN_COMMAND,\n    \"/example\"\n);\n</code></pre>"},{"location":"pages/server/labymod/features/interaction-menu/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p>"},{"location":"pages/server/labymod/features/interaction-menu/#via-labymodplayer","title":"Via LabyModPlayer","text":"<pre><code>// Create a List of entries (array is also possible)\nList&lt;InteractionMenuEntry&gt; entries = new ArrayList&lt;&gt;();\n\n// Add all entries that you want to display\nentries.add(exampleEntry);\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the entries\nlabyModPlayer.sendInteractionMenuEntries(entries);\n</code></pre>"},{"location":"pages/server/labymod/features/interaction-menu/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Create a List of entries (array is also possible)\nList&lt;InteractionMenuEntry&gt; entries = new ArrayList&lt;&gt;();\n\n// Add all entries that you want to display\nentries.add(exampleEntry);\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new InteractionMenuPacket(entries));\n</code></pre>"},{"location":"pages/server/labymod/features/markers/","title":"Markers","text":"<p>Markers are a feature of LabyMod that allows players to place markers on the screen. These markers can be used to highlight certain areas or entities in the game. </p>"},{"location":"pages/server/labymod/features/markers/#set-maker-send-type","title":"Set Maker Send Type","text":"<p>The send type is sent via the <code>MarkerPacket</code>. By default, Markers are only sent to LabyMod friends of the player. You can change this behaviour so that markers are sent to the server via the Server API, you then can handle the Marker and possibly forward them to other players.</p> <p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p>"},{"location":"pages/server/labymod/features/markers/#via-labymodplayer","title":"Via LabyModPlayer","text":"<pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Set the marker send type.\n// Using MarkerSendType.LABY_CONNECT will restore the default behaviour.\nlabyModPlayer.sendMarkerSendType(MarkerSendType.SERVER);\n</code></pre>"},{"location":"pages/server/labymod/features/markers/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet.\n// Using MarkerSendType.LABY_CONNECT will restore the default behaviour.\nlabyModProtocol.sendPacket(uniqueId, new MarkerPacket(MarkerSendType.SERVER));\n</code></pre>"},{"location":"pages/server/labymod/features/markers/#send-markers-to-the-player","title":"Send Markers to the Player","text":"<p>Markers can be sent to the Player via the <code>AddMarkerPacket</code>.</p> <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new AddMarkerPacket(\n    uniqueId, // The sender of the marker\n    0, // The x coordinate of the marker\n    0, // The y coordinate of the marker\n    0, // The z coordinate of the marker\n    true, // Whether the marker should be large or not\n    null // The target of the marker, can be null\n));\n</code></pre>"},{"location":"pages/server/labymod/features/markers/#receiving-markers","title":"Receiving Markers","text":"<p>To receive markers sent by players, you first need to set the marker send type to <code>SERVER</code> as described above. Then you can create a <code>PacketHandler</code> for the <code>ClientAddMarkerPacket</code> to receive the markers. Registering a <code>PacketHandler</code> is described here.</p> <p>To keep the example platform-independent, we removed the import for <code>LabyModProtocolService</code>. Make sure to import the class in your implementation.</p> <pre><code>import net.labymod.serverapi.api.packet.PacketHandler;\nimport net.labymod.serverapi.core.LabyModProtocol;\nimport net.labymod.serverapi.core.packet.clientbound.game.feature.marker.AddMarkerPacket;\nimport net.labymod.serverapi.core.packet.serverbound.game.feature.marker.ClientAddMarkerPacket;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.UUID;\n\npublic class ClientAddMarkerPacketHandler implements PacketHandler&lt;ClientAddMarkerPacket&gt; {\n\n  private final LabyModProtocolService protocolService;\n\n  public ClientAddMarkerPacketHandler(LabyModProtocolService protocolService) {\n    this.protocolService = protocolService;\n  }\n\n  @Override\n  public void handle(@NotNull UUID sender, @NotNull ClientAddMarkerPacket packet) {\n    // Map the ClientAddMarkerPacket to a AddMarkerPacket\n    AddMarkerPacket addMarkerPacket = packet.toAddMarkerPacket(sender);\n\n    // Get the LabyModProtocol\n    LabyModProtocol labyModProtocol = this.protocolService.labyModProtocol();\n\n    // Loop through all players and send the packet\n    this.protocolService.forEachPlayer(player -&gt; labyModProtocol.sendPacket(\n        player.getUniqueId(), addMarkerPacket\n    ));\n  }\n}\n</code></pre>"},{"location":"pages/server/labymod/moderation/addon-recommendation/","title":"Addon Recommendations","text":"<p>The <code>AddonRecommendationPacket</code> is a client-bound packet that opens a popup for the player with addons that are recommended or even required. The client will then respond with an <code>AddonRecommendationResponsePacket</code> that contains the player's response.</p> <p>If you're sending required addons, you'll need to handle the response and check if the player has installed all required addons yourself. LabyMod itself does not enforce the installation of required addons.</p> Note <p>The <code>AddonRecommendationResponsePacket</code> is sent twice by the client. Once before opening the popup and once the player has closed the popup. The <code>#isInitial</code> method can be used to check which response is being sent.</p>"},{"location":"pages/server/labymod/moderation/addon-recommendation/#creating-an-addon-recommendation","title":"Creating an Addon Recommendation","text":"<p>The packet uses the <code>RecommendedAddon</code> model, which can be created with <code>RecommendedAddon.of</code>.</p> <pre><code>// Create the recommended adddon and provide the namespace\nRecommendedAddon recommendedAddon = RecommendedAddon.of(\"example\");\n\n// If the addon is required, execute the following line\nrecommendedAddon.require();\n</code></pre>"},{"location":"pages/server/labymod/moderation/addon-recommendation/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p> <p>If you're not sending the packet with an integrated handler, you need to register a handler for the <code>AddonRecommendationResponsePacket</code> yourself. The process is explained here.</p>"},{"location":"pages/server/labymod/moderation/addon-recommendation/#via-labymodplayer-recommended","title":"Via LabyModPlayer (Recommended)","text":"#sendAddonRecommendations(List, Consumer) #sendAddonRecommendations(List) <pre><code>// Create or get a List of recommended addons \nList&lt;RecommendedAddon&gt; recommendations = new ArrayList&lt;&gt;();\n\n// Add all recommended addons you want to send to the player\nrecommendations.add(recommendedAddon);\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the recommended addons and handle the response\nlabyModPlayer.sendAddonRecommendations(recommendations, response -&gt; {\n    boolean initial = response.isInitial(); // Whether the response is the initial response\n    boolean allInstalled = response.isAllInstalled(); // Whether all recommended addons are installed\n    // Directly handle the response\n});\n</code></pre> <pre><code>// Create or get a List of recommended addons \nList&lt;RecommendedAddon&gt; recommendations = new ArrayList&lt;&gt;();\n\n// Add all recommended addons you want to send to the player\nrecommendations.add(recommendedAddon);\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the recommended addons\nlabyModPlayer.sendAddonRecommendations(serverSwitchPrompt);\n\n// To handle the response, you need to register a PacketHandler for the \n// AddonRecommendationResponsePacket yourself!\n</code></pre>"},{"location":"pages/server/labymod/moderation/addon-recommendation/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"#sendPacket(UUID, Packet) #sendPacket(UUID, IdentifiablePacket, Class, Predicate) <pre><code>// Create or get a List of recommended addons (array is also possible)\nList&lt;RecommendedAddon&gt; recommendations = new ArrayList&lt;&gt;();\n\n// Add all recommended addons you want to send to the player\nrecommendations.add(recommendedAddon);\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new AddonRecommendationPacket(recommendations));\n\n// To handle the response, you need to register a PacketHandler for the \n// AddonRecommendationResponsePacket yourself!\n</code></pre> <pre><code>// Create or get a List of recommended addons (array is also possible)\nList&lt;RecommendedAddon&gt; recommendations = new ArrayList&lt;&gt;();\n\n// Add all recommended addons you want to send to the player\nrecommendations.add(recommendedAddon);\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet and handle the response\nlabyModProtocol.sendPacket(\n    uniqueId,\n    new AddonRecommendationPacket(recommendations),\n    AddonRecommendationResponsePacket.class,\n    response -&gt; {\n        boolean initial = response.isInitial(); // Whether the response is the initial response\n        boolean allInstalled = response.isAllInstalled(); // Whether all recommended addons are installed\n        // Handle the response packet\n\n        return initial; // return #isInitial, as another response is expected if it is the initial response\n    }\n);\n</code></pre>"},{"location":"pages/server/labymod/moderation/disable-addons/","title":"Disable Addons","text":"<p>The <code>AddonDisablePacket</code> is a client-bound packet that forcefully disables the specified addons for the player. Reverting the forced disabled state is also possible via the same packet.</p> Warning <p>While this should work with all addons that can also be disabled by the user, this cannot be guaranteed. Especially for addons that are not in the addon store.</p>"},{"location":"pages/server/labymod/moderation/disable-addons/#disabling-addons","title":"Disabling Addons","text":"Note <p>Some addons also provide special permissions to disable certain features. For user experience sake, please consider disabling these permissions instead of the whole addon (f.e. BetterPerspective).</p>"},{"location":"pages/server/labymod/moderation/disable-addons/#via-labymodplayer-recommended","title":"Via LabyModPlayer (Recommended)","text":"<pre><code>// Create or get a List of addons to disable\nList&lt;String&gt; addonsToDisable = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to disable\naddonsToDisable.add(\"voicechat\");\naddonsToDisable.add(\"clearwater\");\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the addons to disable\nlabyModPlayer.disableAddons(addons);\n</code></pre>"},{"location":"pages/server/labymod/moderation/disable-addons/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Create or get a List of addons to disable (array is also possible)\nList&lt;String&gt; addonsToDisable = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to disable\naddonsToDisable.add(\"voicechat\");\naddonsToDisable.add(\"clearwater\");\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, AddonDisablePacket.disable(addonsToDisable));\n</code></pre>"},{"location":"pages/server/labymod/moderation/disable-addons/#reverting-the-disable-state","title":"Reverting the Disable State","text":""},{"location":"pages/server/labymod/moderation/disable-addons/#via-labymodplayer-recommended_1","title":"Via LabyModPlayer (Recommended)","text":"<p>When disabling addons via LabyModPlayer, all disabled addons are stored in the player's object. This allows you to either revert the disable state for all disabled addons or only for specific ones.</p>  All Disabled Addons Specific Addons <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Revert the disabled state of all disabled addons\nlabyModPlayer.revertDisabledAddons();\n</code></pre> <pre><code>// Create or get a List of addons to enable\nList&lt;String&gt; addonsToRevert = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to enable\naddonsToRevert.add(\"voicechat\");\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the addons to revert\nlabyModPlayer.revertDisabledAddons(addonsToRevert);\n</code></pre>"},{"location":"pages/server/labymod/moderation/disable-addons/#via-the-labymodprotocol_1","title":"Via the LabyModProtocol","text":"<pre><code>// Create or get a List of addons to enable (array is also possible)\nList&lt;String&gt; addonsToRevert = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to enable\naddonsToRevert.add(\"voicechat\");\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, AddonDisablePacket.revert(addonsToRevert));\n</code></pre>"},{"location":"pages/server/labymod/moderation/installed-addons/","title":"Get Installed Addons","text":"<p>There are multiple packets related to the installed addons of your players. But all rely on the client-bound packet <code>InstalledAddonsRequestPacket</code>. The workflow is as follows:</p> <ol> <li>You send the <code>InstalledAddonsRequestPacket</code> to the player containing the addons that you want to request.</li> <li>The client responds with the <code>InstalledAddonsResponsePacket</code> containing all requested addons that are installed.</li> <li>If the enabled state of a requested addon changes (or it was installed), the client will send the    <code>AddonStateChangedPacket</code> to the server.</li> </ol>"},{"location":"pages/server/labymod/moderation/installed-addons/#get-installed-addons","title":"Get Installed Addons","text":"<p><code>LabyModPlayer#installedAddons</code> gets an object of the class <code>InstalledAddonsResponse</code>, this object is created with the <code>LabyModPlayer</code> BUT does not contain any addons until you request them. You can check this by calling <code>#hasResponse</code> on the object.</p> <p>This object is also used as response when using the <code>LabyModPlayer#requestInstalledAddons</code> method (with callback).</p> Important Note <p>Installed addons are not sent to the server by default. You need to request them first, see Requesting Installed Addons.</p> <p>The <code>InstalledAddonsResponse</code> class contains the following methods:</p> <ul> <li><code>#hasResponse</code> - Whether the client has responded with the installed addons.</li> <li><code>#hasRequested</code> - Whether the installed addons were requested</li> <li><code>#getRequested</code> - Gets the requested addons. If <code>#hasRequested</code> is true and the list is empty, all addons were requested.</li> <li><code>#isInstalled</code> - Whether the addon is installed</li> <li><code>#isEnabled</code> - Whether the addon is enabled</li> <li><code>#isDisabled</code> - Whether the addon is disabled</li> <li><code>#isLocal</code> - Returns <code>true</code> if the addon is installed locally (<code>false</code> if it's from the addon store)</li> <li><code>#getVersion</code> - Gets the version of the addon</li> </ul>"},{"location":"pages/server/labymod/moderation/installed-addons/#requesting-installed-addons","title":"Requesting Installed Addons","text":"<p>As mentioned above ALL packets related to installed addons RELY on this packet and it's contents. The client DOES NOT send the installed addons to the server automatically.</p> Important Note <p>Requesting all installed addons is not recommended as it can lead to unnecessary traffic and processing. Only request the addons that you really need to know about.</p>"},{"location":"pages/server/labymod/moderation/installed-addons/#via-labymodplayer-recommended","title":"Via LabyModPlayer (Recommended)","text":"<p>The <code>LabyModPlayer</code> object provides the <code>#installedAddons</code> method to get the installed addons of the player at any time. Check <code>InstalledAddonsResponse#hasResponse</code> before handling it though, to ensure that the data is valid.</p> Note <p>Using the <code>LabyModPlayer</code> for this process is recommended as it keeps track of the installed and enabled addons for you. If you're not using the <code>LabyModPlayer</code>, you need to keep track of the installed (and enabled/disabled) addons yourself by handling the server-bound packets.</p>  Specific Addons All Addons (Not Recommended) <pre><code>// Create or get a List of addons to request\nList&lt;String&gt; addonsToRequest = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to request\n// Keeping the List empty requests all addons (not recommended)\naddonsToRequest.add(\"voicechat\");\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Request the installed addons and optionally handle the response\nlabyModPlayer.requestInstalledAddons(addonsToRequest, response -&gt; {\n    if (response.isEnabled(\"voicechat\")) {\n        // VoiceChat is enabled\n    } else if (response.isDisabled(\"voicechat\")) {\n        // VoiceChat is disabled\n    } else {\n        // VoiceChat is not installed\n    }\n});\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Request all installed addons and optionally handle the response\nlabyModPlayer.requestInstalledAddons(response -&gt; {\n    List&lt;InstalledAddon&gt; installedAddons = response.getInstalledAddons();\n    // Handle the response\n});\n</code></pre>"},{"location":"pages/server/labymod/moderation/installed-addons/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"#sendPacket(UUID, Packet) #sendPacket(UUID, IdentifiablePacket, Class, Predicate) <pre><code>// Create or get a List of addons to request (array is also possible)\nList&lt;String&gt; addonsToRequest = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to request\n// Keeping the List empty requests all addons (not recommended)\naddonsToRequest.add(\"voicechat\");\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new InstalledAddonsRequestPacket(addonsToRequest));\n\n// To handle the response, you need to register a PacketHandler for the \n// InstalledAddonsResponsePacket yourself!\n</code></pre> <pre><code>// Create or get a List of addons to request (array is also possible)\nList&lt;String&gt; addonsToRequest = new ArrayList&lt;&gt;();\n\n// Add the namespace of all addons that you want to request\n// Keeping the List empty requests all addons (not recommended)\naddonsToRequest.add(\"voicechat\");\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet and handle the response\nlabyModProtocol.sendPacket(\n    uniqueId,\n    new InstalledAddonsRequestPacket(recommendations),\n    InstalledAddonsResponsePacket.class,\n    response -&gt; {\n        List&lt;InstalledAddon&gt; installedAddons = response.getInstalledAddons();\n        // Handle the response\n\n        return false; // return false because no other response is expected\n    }\n);\n</code></pre>"},{"location":"pages/server/labymod/moderation/labymod-version/","title":"Get LabyMod Version","text":"<p>The <code>VersionLoginPacket</code> is a server-bound packet that is sent to the server directly after connecting to it. It contains the player's LabyMod version and serves as the first communication between LabyMod and the server.</p>"},{"location":"pages/server/labymod/moderation/labymod-version/#receiving-the-packet","title":"Receiving the Packet","text":"<p>There is generally no need to manually handle this packet, as the LabyMod Server API creates the <code>LabyModPlayer</code> object upon receiving this packet. The LabyMod version is then stored in the player's <code>LabyModPlayer</code> and can be accessed via <code>LabyModPlayer#getLabyModVersion()</code>.</p> <p>If you want to handle it anyway, you can register a <code>PacketHandler</code> for the <code>VersionLoginPacket</code>. The process is explained here.  </p>"},{"location":"pages/server/labymod/moderation/permissions/","title":"Permissions","text":"<p>The <code>PermissionPacket</code> is a client-bound packet that allows servers to deactivate and/or activate certain features for their LabyMod players.</p>"},{"location":"pages/server/labymod/moderation/permissions/#what-permissions-are-available","title":"What permissions are available?","text":"<p>All permissions available in LabyMod 4 itself can be found as constants in the <code>Permission</code> class, integrations may also create their own permissions.  Creating custom permissions is possible via <code>Permission.of(String)</code>.</p>"},{"location":"pages/server/labymod/moderation/permissions/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p> <p>The packet requires the type <code>StatedPermission</code> which can be obtained by calling either <code>Permission#allow</code> or <code>Permission#deny</code>. So for example <code>Permission.CHAT_AUTOTEXT.deny()</code> would disable the chat autotext feature.</p>"},{"location":"pages/server/labymod/moderation/permissions/#via-labymodplayer","title":"Via LabyModPlayer","text":"<pre><code>// Create a List of permissions (array is also possible)\nList&lt;Permission.StatedPermission&gt; permissions = new ArrayList&lt;&gt;();\n\n// Add all permissions you want to allow and/or deny\npermissions.add(Permission.CHAT_AUTOTEXT.deny());\n\n// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Send the permissions\nlabyModPlayer.sendPermissions(permissions);\n</code></pre>"},{"location":"pages/server/labymod/moderation/permissions/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"<pre><code>// Create a List of permissions (array is also possible)\nList&lt;Permission.StatedPermission&gt; permissions = new ArrayList&lt;&gt;();\n\n// Add all permissions you want to allow and/or deny\npermissions.add(Permission.CHAT_AUTOTEXT.deny());\n\n// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new PermissionPacket(permissions));\n</code></pre>"},{"location":"pages/server/labymod/supplements/input-prompt/","title":"Input Prompt","text":"<p>The <code>InputPromptPacket</code> is a client-bound packet that opens a prompt for the player with a text field.</p> <p>The client will then respond with a <code>InputPromptResponsePacket</code> that contains the player's input.</p> <p></p>"},{"location":"pages/server/labymod/supplements/input-prompt/#creating-an-input-prompt","title":"Creating an Input Prompt","text":"<p>The packet uses the <code>InputPrompt</code> model, which can be created with either <code>InputPrompt.builder</code> or <code>InputPrompt.create</code>. The InputPrompt model uses the Server API's own Component model.</p>  InputPrompt.builder InputPrompt.create <pre><code>InputPrompt inputPrompt = InputPrompt.builder()\n    .title(ServerAPIComponent.text(\"Example Input Switch Prompt\")\n        .color(ServerAPITextColor.AQUA)\n        .decorate(ServerAPITextDecoration.BOLD))\n    .placeholder(ServerAPIComponent.text(\"Example placeholder\"))\n    .defaultValue(\"value\")\n    .maxLength(12)\n    .build();\n</code></pre> <pre><code>InputPrompt inputPrompt = InputPrompt.create(\n    ServerAPIComponent.text(\"Example Input Switch Prompt\")\n        .color(ServerAPITextColor.AQUA)\n        .decorate(ServerAPITextDecoration.BOLD),\n    ServerAPIComponent.text(\"Example placeholder\"),\n    \"value\",\n    12\n);\n</code></pre>"},{"location":"pages/server/labymod/supplements/input-prompt/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p> <p>If you're not sending the packet with an integrated handler, you need to register a handler for the <code>ServerSwitchPromptResponsePacket</code> yourself. The process is explained here.</p>"},{"location":"pages/server/labymod/supplements/input-prompt/#via-labymodplayer-recommended","title":"Via LabyModPlayer (Recommended)","text":"#openInputPrompt(InputPrompt, Consumer) #openInputPrompt(InputPrompt) <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Open the input prompt and handle the response\nlabyModPlayer.openInputPrompt(inputPrompt, input -&gt; {\n    // Directly handle the input\n});\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Open the input prompt\nlabyModPlayer.openInputPrompt(inputPrompt);\n\n// To handle the response, you need to register a PacketHandler for the \n// InputPromptResponsePacket yourself!\n</code></pre>"},{"location":"pages/server/labymod/supplements/input-prompt/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"#sendPacket(UUID, Packet) #sendPacket(UUID, IdentifiablePacket, Class, Predicate) <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new InputPromptPacket(inputPrompt));\n\n// To handle the response, you need to register a PacketHandler for the \n// InputPromptResponsePacket yourself!\n</code></pre> <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet and handle the response\nlabyModProtocol.sendPacket(\n    uniqueId,\n    new InputPromptPacket(inputPrompt),\n    InputPromptResponsePacket.class,\n    response -&gt; {\n        // Handle the response packet\n\n        return false; // Return false, as only one response is expected\n    }\n);\n</code></pre>"},{"location":"pages/server/labymod/supplements/server-switch/","title":"Server Switch Prompt","text":"<p>The <code>ServerSwitchPromptPacket</code> is a client-bound packet that allows you to open a prompt for the player that recommends switching to another server. The player can then confirm or cancel the server switch.</p> <p>The client will then respond with a <code>ServerSwitchPromptResponsePacket</code> that contains the player's decision.</p> <p></p>"},{"location":"pages/server/labymod/supplements/server-switch/#creating-an-input-prompt","title":"Creating an Input Prompt","text":"<p>The packet uses the <code>ServerSwitchPrompt</code> model, which can be created with <code>ServerSwitchPrompt.create</code>. The ServerSwitchPrompt model uses the Server API's own Component model.</p> <pre><code>ServerSwitchPrompt serverSwitchPrompt = ServerSwitchPrompt.create(\n    ServerAPIComponent.text(\"Example Server Switch Prompt\")\n        .color(ServerAPITextColor.GOLD)\n        .decorate(ServerAPITextDecoration.BOLD),\n    \"hypixel.net\"\n);\n</code></pre>"},{"location":"pages/server/labymod/supplements/server-switch/#sending-the-packet","title":"Sending the Packet","text":"<p>The packet can either be sent via the <code>LabyModPlayer</code> object of the player, or directly via the <code>LabyModProtocol</code>.</p> <p>If you're not sending the packet with an integrated handler, you need to register a handler for the <code>ServerSwitchPromptResponsePacket</code> yourself. The process is explained here.</p>"},{"location":"pages/server/labymod/supplements/server-switch/#via-labymodplayer-recommended","title":"Via LabyModPlayer (Recommended)","text":"#openServerSwitchPrompt(ServerSwitchPrompt, Consumer) #openServerSwitchPrompt(ServerSwitchPrompt) <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Open the server switch prompt and handle the response\nlabyModPlayer.openServerSwitchPrompt(serverSwitchPrompt, response -&gt; {\n    boolean accepted = response.wasAccepted(); // Whether the player accepted the server switch\n    // Directly handle the response\n});\n</code></pre> <pre><code>// Get the LabyModPlayer\nLabyModPlayer labyModPlayer = LabyModProtocolService.get().getPlayer(uniqueId);\n\n// Open the server switch prompt\nlabyModPlayer.openServerSwitchPrompt(serverSwitchPrompt);\n\n// To handle the response, you need to register a PacketHandler for the \n// ServerSwitchPromptResponsePacket yourself!\n</code></pre>"},{"location":"pages/server/labymod/supplements/server-switch/#via-the-labymodprotocol","title":"Via the LabyModProtocol","text":"#sendPacket(UUID, Packet) #sendPacket(UUID, IdentifiablePacket, Class, Predicate) <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet\nlabyModProtocol.sendPacket(uniqueId, new ServerSwitchPromptPacket(inputPrompt));\n\n// To handle the response, you need to register a PacketHandler for the \n// ServerSwitchPromptResponsePacket yourself!\n</code></pre> <pre><code>// Get the LabyModProtocol\nLabyModProtocol labyModProtocol = LabyModProtocolService.get().labyModProtocol();\n\n// Send the packet and handle the response\nlabyModProtocol.sendPacket(\n    uniqueId,\n    new ServerSwitchPromptPacket(inputPrompt),\n    ServerSwitchPromptResponsePacket.class,\n    response -&gt; {\n        boolean accepted = response.wasAccepted(); // Whether the player accepted the server switch\n        // Handle the response packet\n\n        return false; // Return false, as only one response is expected\n    }\n);\n</code></pre>"}]}